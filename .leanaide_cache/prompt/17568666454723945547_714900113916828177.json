[["Product of two rings is a ring. ",{"type":"{R : Type u_3} → {S : Type u_5} → [inst : Ring R] → [inst : Ring S] → Ring (R × S)","name":"Prod.instRing","isProp":false,"docString":"Product of two rings is a ring. ","distance":0.309672412858382817280045173902180977165699005126953125}],[" In a ring with a positive cone, the product of two positive elements is positive.",{"type":"∀ {α : Type u_2} [inst : Ring α] (self : Ring.PositiveCone α) (a b : α), self.pos a → self.pos b → self.pos (a * b)","name":"Ring.PositiveCone.mul_pos","isProp":true,"docString":" In a ring with a positive cone, the product of two positive elements is positive.","distance":0.36486146518925022252943790590506978332996368408203125}],["The theorem `Finset.prod_cons` states that for any types `α` and `β`, any finite set `s` of elements of type `α`, any element `a` of type `α`, and any function `f` from `α` to `β`, where `β` is a commutative monoid, if `a` is not an element of `s`, then the product of `f x` for every `x` in the set `{a} ∪ s` (constructed by cons function) is equal to `f a` multiplied by the product of `f x` for every `x` in `s`. In mathematical terms, this theorem states that $\\prod_{x \\in \\{a\\} \\cup s} f(x) = f(a) \\cdot \\prod_{x \\in s} f(x)$.",{"type":"∀ {α : Type u_3} {β : Type u_4} {s : Finset α} {a : α} {f : α → β} [inst : CommMonoid β] (h : a ∉ s),\n  ((Finset.cons a s h).prod fun x => f x) = f a * s.prod fun x => f x","name":"Finset.prod_cons","isProp":true,"docString":"The theorem `Finset.prod_cons` states that for any types `α` and `β`, any finite set `s` of elements of type `α`, any element `a` of type `α`, and any function `f` from `α` to `β`, where `β` is a commutative monoid, if `a` is not an element of `s`, then the product of `f x` for every `x` in the set `{a} ∪ s` (constructed by cons function) is equal to `f a` multiplied by the product of `f x` for every `x` in `s`. In mathematical terms, this theorem states that $\\prod_{x \\in \\{a\\} \\cup s} f(x) = f(a) \\cdot \\prod_{x \\in s} f(x)$.","distance":0.37955374404004638133613980244263075292110443115234375}],["Notation for the product ",{"type":"Lean.TrailingParserDescr","name":"CategoryTheory.Limits.«term_⨯_»","isProp":false,"docString":"Notation for the product ","distance":0.312932694654998233563247822530684061348438262939453125}],[" The second component of the product of two dual numbers is equal to the sum of the product of their first components and the product of their second components.",{"type":"∀ {R : Type u_1} [inst : Semiring R] (x y : DualNumber R),\n  TrivSqZeroExt.snd (x * y) = TrivSqZeroExt.fst x * TrivSqZeroExt.snd y + TrivSqZeroExt.snd x * TrivSqZeroExt.fst y","name":"DualNumber.snd_mul","isProp":true,"docString":" The second component of the product of two dual numbers is equal to the sum of the product of their first components and the product of their second components.","distance":0.37828008335658669381018626154400408267974853515625}],["The theorem `List.prod_cons` states that for any type `M` that forms a monoid, any list `l` of elements of type `M`, and any element `a` of type `M`, the product of the list that results from prepending `a` to `l` is equal to `a` multiplied by the product of `l`. In other words, if you add an element to the start of a list and then calculate the product of the list, it's the same as if you multiplied that element with the product of the original list.",{"type":"∀ {M : Type u_5} [inst : Monoid M] {l : List M} {a : M}, (a :: l).prod = a * l.prod","name":"List.prod_cons","isProp":true,"docString":"The theorem `List.prod_cons` states that for any type `M` that forms a monoid, any list `l` of elements of type `M`, and any element `a` of type `M`, the product of the list that results from prepending `a` to `l` is equal to `a` multiplied by the product of `l`. In other words, if you add an element to the start of a list and then calculate the product of the list, it's the same as if you multiplied that element with the product of the original list.","distance":0.380386650999149311669356166021316312253475189208984375}],["The product of two two-pointings. ",{"type":"{α : Type u_1} → {β : Type u_2} → TwoPointing α → TwoPointing β → TwoPointing (α × β)","name":"TwoPointing.prod","isProp":false,"docString":"The product of two two-pointings. ","distance":0.314611755536788162412875635709497146308422088623046875}],["The second projection from the product. ",{"type":"{X Y : TopCat} → TopCat.of (↑X × ↑Y) ⟶ Y","name":"TopCat.prodSnd","isProp":false,"docString":"The second projection from the product. ","distance":0.316154977063621667188186847852193750441074371337890625}],["The coproduct cocone associated to the explicit finite coproduct. ",{"type":"{α : Type} → [inst : Fintype α] → (X : α → Profinite) → CategoryTheory.Limits.Cocone (CategoryTheory.Discrete.functor X)","name":"Profinite.finiteCoproduct.cocone","isProp":false,"docString":"The coproduct cocone associated to the explicit finite coproduct. ","distance":0.322710706880620146197458097958588041365146636962890625}],["Product of two uniform isomorphisms. ",{"type":"{α : Type u} →\n  {β : Type u_1} →\n    {γ : Type u_2} →\n      {δ : Type u_3} →\n        [inst : UniformSpace α] →\n          [inst_1 : UniformSpace β] →\n            [inst_2 : UniformSpace γ] → [inst_3 : UniformSpace δ] → α ≃ᵤ β → γ ≃ᵤ δ → α × γ ≃ᵤ β × δ","name":"UniformEquiv.prodCongr","isProp":false,"docString":"Product of two uniform isomorphisms. ","distance":0.325589086167408059413475029941764660179615020751953125}],["The product of two partial equivalences, as a partial equivalence on the product. ",{"type":"{α : Type u_1} →\n  {β : Type u_2} → {γ : Type u_3} → {δ : Type u_4} → PartialEquiv α β → PartialEquiv γ δ → PartialEquiv (α × γ) (β × δ)","name":"PartialEquiv.prod","isProp":false,"docString":"The product of two partial equivalences, as a partial equivalence on the product. ","distance":0.326858268284835939976318286426248960196971893310546875}],["The product of two lower sets as a lower set. ",{"type":"{α : Type u_1} →\n  {β : Type u_2} → [inst : Preorder α] → [inst_1 : Preorder β] → LowerSet α → LowerSet β → LowerSet (α × β)","name":"LowerSet.prod","isProp":false,"docString":"The product of two lower sets as a lower set. ","distance":0.3280786062886591469833774681319482624530792236328125}],["The prod of two morphisms is a morphism. ",{"type":"{R : Type u} →\n  {A : Type v} →\n    {B : Type w} →\n      {C : Type w₁} →\n        [inst : Monoid R] →\n          [inst_1 : NonUnitalNonAssocSemiring A] →\n            [inst_2 : DistribMulAction R A] →\n              [inst_3 : NonUnitalNonAssocSemiring B] →\n                [inst_4 : DistribMulAction R B] →\n                  [inst_5 : NonUnitalNonAssocSemiring C] →\n                    [inst_6 : DistribMulAction R C] → (A →ₙₐ[R] B) → (A →ₙₐ[R] C) → A →ₙₐ[R] B × C","name":"NonUnitalAlgHom.prod","isProp":false,"docString":"The prod of two morphisms is a morphism. ","distance":0.329214555843309331084611812912044115364551544189453125}],["Product of two homeomorphisms. ",{"type":"{X : Type u_1} →\n  {Y : Type u_2} →\n    [inst : TopologicalSpace X] →\n      [inst_1 : TopologicalSpace Y] →\n        {X' : Type u_4} →\n          {Y' : Type u_5} →\n            [inst_2 : TopologicalSpace X'] → [inst_3 : TopologicalSpace Y'] → X ≃ₜ X' → Y ≃ₜ Y' → X × Y ≃ₜ X' × Y'","name":"Homeomorph.prodCongr","isProp":false,"docString":"Product of two homeomorphisms. ","distance":0.329619786257866420609019542098394595086574554443359375}],["Product of two semirings is a semiring. ",{"type":"{R : Type u_3} → {S : Type u_5} → [inst : Semiring R] → [inst : Semiring S] → Semiring (R × S)","name":"Prod.instSemiring","isProp":false,"docString":"Product of two semirings is a semiring. ","distance":0.33122627596696585516866662146640010178089141845703125}],["The equivalence between the opposite of a product and the product of the opposites. ",{"type":"(C : Type u₃) →\n  [inst : CategoryTheory.Category.{v₃, u₃} C] →\n    {D : Type u₄} → [inst_1 : CategoryTheory.Category.{v₄, u₄} D] → (C × D)ᵒᵖ ≌ Cᵒᵖ × Dᵒᵖ","name":"CategoryTheory.prodOpEquiv","isProp":false,"docString":"The equivalence between the opposite of a product and the product of the opposites. ","distance":0.33279799171348034558803874460863880813121795654296875}],["The coproduct of the cofinite filters on two types is the cofinite filter on their product. ",{"type":"∀ {α : Type u_2} {β : Type u_3}, Filter.coprod Filter.cofinite Filter.cofinite = Filter.cofinite","name":"Filter.coprod_cofinite","isProp":true,"docString":"The coproduct of the cofinite filters on two types is the cofinite filter on their product. ","distance":0.333592819434942289280598970435676164925098419189453125}],["A binary cofan is just a cocone on a diagram indexing a coproduct. ",{"type":"{C : Type u} → [inst : CategoryTheory.Category.{v, u} C] → C → C → Type (max u v)","name":"CategoryTheory.Limits.BinaryCofan","isProp":false,"docString":"A binary cofan is just a cocone on a diagram indexing a coproduct. ","distance":0.3346093336246998006799913127906620502471923828125}],["The projection map to the second component of the product. ",{"type":"{C : Type u} →\n  [inst : CategoryTheory.Category.{v, u} C] →\n    {X Y : C} → [inst_1 : CategoryTheory.Limits.HasBinaryProduct X Y] → X ⨯ Y ⟶ Y","name":"CategoryTheory.Limits.prod.snd","isProp":false,"docString":"The projection map to the second component of the product. ","distance":0.335245910518761736085480151814408600330352783203125}],["Product of two kernels. This is meaningful only when the kernels are s-finite. ",{"type":"{α : Type u_1} →\n  {β : Type u_2} →\n    {mα : MeasurableSpace α} →\n      {mβ : MeasurableSpace β} →\n        {γ : Type u_4} →\n          {mγ : MeasurableSpace γ} →\n            ↥(ProbabilityTheory.kernel α β) → ↥(ProbabilityTheory.kernel α γ) → ↥(ProbabilityTheory.kernel α (β × γ))","name":"ProbabilityTheory.kernel.prod","isProp":false,"docString":"Product of two kernels. This is meaningful only when the kernels are s-finite. ","distance":0.33558391755732885908258822382776997983455657958984375}],["The tensor product of two holors. ",{"type":"{α : Type} → {ds₁ ds₂ : List ℕ} → [inst : Mul α] → Holor α ds₁ → Holor α ds₂ → Holor α (ds₁ ++ ds₂)","name":"Holor.mul","isProp":false,"docString":"The tensor product of two holors. ","distance":0.33686538636499496757181759676313959062099456787109375}],["The product of two positive elements is positive. ",{"type":"∀ {α : Type u} [self : StrictOrderedRing α] (a b : α), 0 < a → 0 < b → 0 < a * b","name":"StrictOrderedRing.mul_pos","isProp":true,"docString":"The product of two positive elements is positive. ","distance":0.337837288666810897641568089966312982141971588134765625}],["The set product of two sets is equivalent to the type product of their coercions to types. ",{"type":"{α : Type u_1} → {β : Type u_2} → (s : Set α) → (t : Set β) → ↑(s ×ˢ t) ≃ ↑s × ↑t","name":"Equiv.Set.prod","isProp":false,"docString":"The set product of two sets is equivalent to the type product of their coercions to types. ","distance":0.33803039537177947959634138896944932639598846435546875}],["The product cone induced by the concrete product. ",{"type":"{R : Type u} → [inst : Ring R] → {ι : Type v} → (Z : ι → ModuleCatMax R) → CategoryTheory.Limits.Fan Z","name":"ModuleCat.productCone","isProp":false,"docString":"The product cone induced by the concrete product. ","distance":0.338205892602929936163747015598346479237079620361328125}]]