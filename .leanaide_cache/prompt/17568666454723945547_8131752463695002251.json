[["The sum of two natural transformations. ",{"type":"{A : Type u₁} →\n  [inst : CategoryTheory.Category.{v₁, u₁} A] →\n    {B : Type u₁} →\n      [inst_1 : CategoryTheory.Category.{v₁, u₁} B] →\n        {C : Type u₁} →\n          [inst_2 : CategoryTheory.Category.{v₁, u₁} C] →\n            {D : Type u₁} →\n              [inst_3 : CategoryTheory.Category.{v₁, u₁} D] →\n                {F G : CategoryTheory.Functor A B} →\n                  {H I : CategoryTheory.Functor C D} →\n                    (F ⟶ G) → (H ⟶ I) → (CategoryTheory.Functor.sum F H ⟶ CategoryTheory.Functor.sum G I)","name":"CategoryTheory.NatTrans.sum","isProp":false,"docString":"The sum of two natural transformations. ","distance":0.28969950559718393723329654676490463316440582275390625}],[" For all natural numbers `n`, the product of `n` and `n-1` is an even number. Equivalently, the product of two consecutive natural numbers is an even number.",{"type":"∀ (n : ℕ), Even (n * (n - 1))","name":"Nat.even_mul_self_pred","isProp":true,"docString":" For all natural numbers `n`, the product of `n` and `n-1` is an even number. Equivalently, the product of two consecutive natural numbers is an even number.","distance":0.312830259206786587267146160229458473622798919677734375}],["This theorem states that for any two natural numbers `m` and `n`, the product of `m` and the successor of `n` with a negative sign is equal to the negation of the product of `m` and the successor of `n` when both are cast to integers. In other words, multiplying a natural number with the negative successor of another natural number in the integers is the same as taking the negative of the product of the two natural numbers, where the second one has been succeeded.",{"type":"∀ (m n : ℕ), ↑m * Int.negSucc n = -↑(m * n.succ)","name":"Int.ofNat_mul_negSucc","isProp":true,"docString":"This theorem states that for any two natural numbers `m` and `n`, the product of `m` and the successor of `n` with a negative sign is equal to the negation of the product of `m` and the successor of `n` when both are cast to integers. In other words, multiplying a natural number with the negative successor of another natural number in the integers is the same as taking the negative of the product of the two natural numbers, where the second one has been succeeded.","distance":0.32586483340481020576362425344996154308319091796875}],["The cartesian product of two natural transformations. ",{"type":"{A : Type u₁} →\n  [inst : CategoryTheory.Category.{v₁, u₁} A] →\n    {B : Type u₂} →\n      [inst_1 : CategoryTheory.Category.{v₂, u₂} B] →\n        {C : Type u₃} →\n          [inst_2 : CategoryTheory.Category.{v₃, u₃} C] →\n            {D : Type u₄} →\n              [inst_3 : CategoryTheory.Category.{v₄, u₄} D] →\n                {F G : CategoryTheory.Functor A B} →\n                  {H I : CategoryTheory.Functor C D} →\n                    (F ⟶ G) → (H ⟶ I) → (CategoryTheory.Functor.prod F H ⟶ CategoryTheory.Functor.prod G I)","name":"CategoryTheory.NatTrans.prod","isProp":false,"docString":"The cartesian product of two natural transformations. ","distance":0.29768878422498168401233442637021653354167938232421875}],[" For any natural number `n`, the product of `n + 1` and the central binomial coefficient of `n + 1` equals twice the product of `2n + 1` and the central binomial coefficient of `n`. In Lean notation, `(n + 1) * binom (2*n + 1, n + 1) = 2 * (2*n + 1) * binom (2*n, n)`.",{"type":"∀ (n : ℕ), (n + 1) * (n + 1).centralBinom = 2 * (2 * n + 1) * n.centralBinom","name":"Nat.succ_mul_centralBinom_succ","isProp":true,"docString":" For any natural number `n`, the product of `n + 1` and the central binomial coefficient of `n + 1` equals twice the product of `2n + 1` and the central binomial coefficient of `n`. In Lean notation, `(n + 1) * binom (2*n + 1, n + 1) = 2 * (2*n + 1) * binom (2*n, n)`.","distance":0.3446644378628616056658984234672971069812774658203125}],["The theorem `Nat.prod_factors` in Lean 4 asserts that for every natural number `n` such that `n` is not equal to zero, the product of the list of its prime factors (as given by the function `Nat.factors n`) equals the number `n` itself. In other words, if you take a non-zero natural number, find all its prime factors, and multiply them together, you get the original number back. This is a formalization of the fundamental theorem of arithmetic, which states that every integer greater than 1 either is a prime number itself or can be factored as a product of primes in an essentially unique way.",{"type":"∀ {n : ℕ}, n ≠ 0 → n.factors.prod = n","name":"Nat.prod_factors","isProp":true,"docString":"The theorem `Nat.prod_factors` in Lean 4 asserts that for every natural number `n` such that `n` is not equal to zero, the product of the list of its prime factors (as given by the function `Nat.factors n`) equals the number `n` itself. In other words, if you take a non-zero natural number, find all its prime factors, and multiply them together, you get the original number back. This is a formalization of the fundamental theorem of arithmetic, which states that every integer greater than 1 either is a prime number itself or can be factored as a product of primes in an essentially unique way.","distance":0.327133175978040757758691370327142067253589630126953125}],["The cartesian product of two natural isomorphisms. ",{"type":"{A : Type u₁} →\n  [inst : CategoryTheory.Category.{v₁, u₁} A] →\n    {B : Type u₂} →\n      [inst_1 : CategoryTheory.Category.{v₂, u₂} B] →\n        {C : Type u₃} →\n          [inst_2 : CategoryTheory.Category.{v₃, u₃} C] →\n            {D : Type u₄} →\n              [inst_3 : CategoryTheory.Category.{v₄, u₄} D] →\n                {F F' : CategoryTheory.Functor A B} →\n                  {G G' : CategoryTheory.Functor C D} →\n                    (F ≅ F') → (G ≅ G') → (CategoryTheory.Functor.prod F G ≅ CategoryTheory.Functor.prod F' G')","name":"CategoryTheory.NatIso.prod","isProp":false,"docString":"The cartesian product of two natural isomorphisms. ","distance":0.304042958577106059436800933326594531536102294921875}],["Product of two uniform isomorphisms. ",{"type":"{α : Type u} →\n  {β : Type u_1} →\n    {γ : Type u_2} →\n      {δ : Type u_3} →\n        [inst : UniformSpace α] →\n          [inst_1 : UniformSpace β] →\n            [inst_2 : UniformSpace γ] → [inst_3 : UniformSpace δ] → α ≃ᵤ β → γ ≃ᵤ δ → α × γ ≃ᵤ β × δ","name":"UniformEquiv.prodCongr","isProp":false,"docString":"Product of two uniform isomorphisms. ","distance":0.305715818616559109610619771046913228929042816162109375}],["The product of two natural numbers is greater than 1 if and only if\nat least one of them is greater than 1 and both are positive. ",{"type":"∀ {m n : ℕ}, 1 < m * n ↔ 0 < m ∧ 0 < n ∧ (1 < m ∨ 1 < n)","name":"Nat.one_lt_mul_iff","isProp":true,"docString":"The product of two natural numbers is greater than 1 if and only if\nat least one of them is greater than 1 and both are positive. ","distance":0.310027268908076081288527348078787326812744140625}],["Product of two rings is a ring. ",{"type":"{R : Type u_3} → {S : Type u_5} → [inst : Ring R] → [inst : Ring S] → Ring (R × S)","name":"Prod.instRing","isProp":false,"docString":"Product of two rings is a ring. ","distance":0.310127825767581466465117046027444303035736083984375}],["The set of natural numbers that are sums of two squares is closed under multiplication. ",{"type":"∀ {a b x y u v : ℕ}, a = x ^ 2 + y ^ 2 → b = u ^ 2 + v ^ 2 → ∃ r s, a * b = r ^ 2 + s ^ 2","name":"Nat.sq_add_sq_mul","isProp":true,"docString":"The set of natural numbers that are sums of two squares is closed under multiplication. ","distance":0.31182346655392645384807792652281932532787322998046875}],["Product of two homeomorphisms. ",{"type":"{X : Type u_1} →\n  {Y : Type u_2} →\n    [inst : TopologicalSpace X] →\n      [inst_1 : TopologicalSpace Y] →\n        {X' : Type u_4} →\n          {Y' : Type u_5} →\n            [inst_2 : TopologicalSpace X'] → [inst_3 : TopologicalSpace Y'] → X ≃ₜ X' → Y ≃ₜ Y' → X × Y ≃ₜ X' × Y'","name":"Homeomorph.prodCongr","isProp":false,"docString":"Product of two homeomorphisms. ","distance":0.314591503340925282561357789745670743286609649658203125}],["The prod of two morphisms is a morphism. ",{"type":"{R : Type u} →\n  {A : Type v} →\n    {B : Type w} →\n      {C : Type w₁} →\n        [inst : Monoid R] →\n          [inst_1 : NonUnitalNonAssocSemiring A] →\n            [inst_2 : DistribMulAction R A] →\n              [inst_3 : NonUnitalNonAssocSemiring B] →\n                [inst_4 : DistribMulAction R B] →\n                  [inst_5 : NonUnitalNonAssocSemiring C] →\n                    [inst_6 : DistribMulAction R C] → (A →ₙₐ[R] B) → (A →ₙₐ[R] C) → A →ₙₐ[R] B × C","name":"NonUnitalAlgHom.prod","isProp":false,"docString":"The prod of two morphisms is a morphism. ","distance":0.3157620502483176050390056843752972781658172607421875}],["Multiplication by a natural number. ",{"type":"{M : Type u} → [self : AddMonoid M] → ℕ → M → M","name":"AddMonoid.nsmul","isProp":false,"docString":"Multiplication by a natural number. ","distance":0.316672952937614493595930298397433944046497344970703125}],["Expressing the product of two polynomials as a double sum. ",{"type":"∀ {R : Type u} [inst : Semiring R] {p q : Polynomial R},\n  p * q =\n    Finset.sum (Polynomial.support p) fun i =>\n      Polynomial.sum q fun j a => (Polynomial.monomial (i + j)) (Polynomial.coeff p i * a)","name":"Polynomial.mul_eq_sum_sum","isProp":true,"docString":"Expressing the product of two polynomials as a double sum. ","distance":0.321122721905995833768798775054165162146091461181640625}],["The product of two two-pointings. ",{"type":"{α : Type u_1} → {β : Type u_2} → TwoPointing α → TwoPointing β → TwoPointing (α × β)","name":"TwoPointing.prod","isProp":false,"docString":"The product of two two-pointings. ","distance":0.32420776625329039699607847069273702800273895263671875}],["Scalar multiplication together with taking a natural number power. ",{"type":"{S : Type u_1} →\n  [inst : AddCommMonoid S] →\n    [inst_1 : Pow S ℕ] → S → {R : Type u_2} → [inst_2 : Semiring R] → [inst : MulActionWithZero R S] → ℕ → R → S","name":"Polynomial.smul_pow","isProp":false,"docString":"Scalar multiplication together with taking a natural number power. ","distance":0.325742769769499174170590549692860804498195648193359375}],["Two positive naturals are equal if their prime padic valuations are equal ",{"type":"∀ (a b : ℕ), a ≠ 0 → b ≠ 0 → (a = b ↔ ∀ (p : ℕ), Nat.Prime p → padicValNat p a = padicValNat p b)","name":"Nat.eq_iff_prime_padicValNat_eq","isProp":true,"docString":"Two positive naturals are equal if their prime padic valuations are equal ","distance":0.328924868324178054646012014927691780030727386474609375}],["Two natural numbers are equal if and only if they have the same multiples. ",{"type":"∀ {m n : ℕ}, (∀ (a : ℕ), m ∣ a ↔ n ∣ a) ↔ m = n","name":"Nat.dvd_right_iff_eq","isProp":true,"docString":"Two natural numbers are equal if and only if they have the same multiples. ","distance":0.33315294080343982319192264185403473675251007080078125}],["An inner product with a sum on the right. ",{"type":"∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  {ι : Type u_4} (s : Finset ι) (f : ι → E) (x : E), ⟪x, Finset.sum s fun i => f i⟫_𝕜 = Finset.sum s fun i => ⟪x, f i⟫_𝕜","name":"inner_sum","isProp":true,"docString":"An inner product with a sum on the right. ","distance":0.334665839493590688835666924205725081264972686767578125}],["The alternating product of a list. ",{"type":"{G : Type u_1} → [inst : One G] → [inst : Mul G] → [inst : Inv G] → List G → G","name":"List.alternatingProd","isProp":false,"docString":"The alternating product of a list. ","distance":0.3354082307472119328650705938343890011310577392578125}],["Subtraction of two natural numbers. ",{"type":"ℕ → ℕ → ℤ","name":"Int.subNatNat","isProp":false,"docString":"Subtraction of two natural numbers. ","distance":0.3371314106962992607208207118674181401729583740234375}],["Product of two distributive types is distributive. ",{"type":"{R : Type u_3} → {S : Type u_5} → [inst : Distrib R] → [inst : Distrib S] → Distrib (R × S)","name":"Prod.instDistrib","isProp":false,"docString":"Product of two distributive types is distributive. ","distance":0.337132258442175924972872280704905278980731964111328125}],["Two finite cardinals are equal iff they are equal their to_nat are equal ",{"type":"∀ {c d : Cardinal.{u_1}}, c < Cardinal.aleph0 → d < Cardinal.aleph0 → (Cardinal.toNat c = Cardinal.toNat d ↔ c = d)","name":"Cardinal.toNat_eq_iff_eq_of_lt_aleph0","isProp":true,"docString":"Two finite cardinals are equal iff they are equal their to_nat are equal ","distance":0.338169934205527489279319297565962187945842742919921875}]]