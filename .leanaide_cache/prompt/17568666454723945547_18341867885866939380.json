[["Product of two uniform isomorphisms. ",{"type":"{Œ± : Type u} ‚Üí\n  {Œ≤ : Type u_1} ‚Üí\n    {Œ≥ : Type u_2} ‚Üí\n      {Œ¥ : Type u_3} ‚Üí\n        [inst : UniformSpace Œ±] ‚Üí\n          [inst_1 : UniformSpace Œ≤] ‚Üí\n            [inst_2 : UniformSpace Œ≥] ‚Üí [inst_3 : UniformSpace Œ¥] ‚Üí Œ± ‚âÉ·µ§ Œ≤ ‚Üí Œ≥ ‚âÉ·µ§ Œ¥ ‚Üí Œ± √ó Œ≥ ‚âÉ·µ§ Œ≤ √ó Œ¥","name":"UniformEquiv.prodCongr","isProp":false,"docString":"Product of two uniform isomorphisms. ","distance":0.290840945887199942010425957050756551325321197509765625}],[" For any category with binary products, the product of two objects exists.",{"type":"‚àÄ {C : Type u_2} [inst : CategoryTheory.Category.{u_1, u_2} C] [inst_1 : CategoryTheory.Limits.HasBinaryProducts C]\n  (X Y : C), CategoryTheory.Limits.HasLimit (CategoryTheory.Limits.pair X Y)","name":"CategoryTheory.Limits.prod.functor.proof_1","isProp":true,"docString":" For any category with binary products, the product of two objects exists.","distance":0.342389081874536926886065657527069561183452606201171875}],["The theorem `Finset.prod_cons` states that for any types `Œ±` and `Œ≤`, any finite set `s` of elements of type `Œ±`, any element `a` of type `Œ±`, and any function `f` from `Œ±` to `Œ≤`, where `Œ≤` is a commutative monoid, if `a` is not an element of `s`, then the product of `f x` for every `x` in the set `{a} ‚à™ s` (constructed by cons function) is equal to `f a` multiplied by the product of `f x` for every `x` in `s`. In mathematical terms, this theorem states that $\\prod_{x \\in \\{a\\} \\cup s} f(x) = f(a) \\cdot \\prod_{x \\in s} f(x)$.",{"type":"‚àÄ {Œ± : Type u_3} {Œ≤ : Type u_4} {s : Finset Œ±} {a : Œ±} {f : Œ± ‚Üí Œ≤} [inst : CommMonoid Œ≤] (h : a ‚àâ s),\n  ((Finset.cons a s h).prod fun x => f x) = f a * s.prod fun x => f x","name":"Finset.prod_cons","isProp":true,"docString":"The theorem `Finset.prod_cons` states that for any types `Œ±` and `Œ≤`, any finite set `s` of elements of type `Œ±`, any element `a` of type `Œ±`, and any function `f` from `Œ±` to `Œ≤`, where `Œ≤` is a commutative monoid, if `a` is not an element of `s`, then the product of `f x` for every `x` in the set `{a} ‚à™ s` (constructed by cons function) is equal to `f a` multiplied by the product of `f x` for every `x` in `s`. In mathematical terms, this theorem states that $\\prod_{x \\in \\{a\\} \\cup s} f(x) = f(a) \\cdot \\prod_{x \\in s} f(x)$.","distance":0.3340323486283203191504753704066388309001922607421875}],["Product of two rings is a ring. ",{"type":"{R : Type u_3} ‚Üí {S : Type u_5} ‚Üí [inst : Ring R] ‚Üí [inst : Ring S] ‚Üí Ring (R √ó S)","name":"Prod.instRing","isProp":false,"docString":"Product of two rings is a ring. ","distance":0.2929431949292486958569270427688024938106536865234375}],[" The second component of the product of two dual numbers is equal to the sum of the product of their first components and the product of their second components.",{"type":"‚àÄ {R : Type u_1} [inst : Semiring R] (x y : DualNumber R),\n  TrivSqZeroExt.snd (x * y) = TrivSqZeroExt.fst x * TrivSqZeroExt.snd y + TrivSqZeroExt.snd x * TrivSqZeroExt.fst y","name":"DualNumber.snd_mul","isProp":true,"docString":" The second component of the product of two dual numbers is equal to the sum of the product of their first components and the product of their second components.","distance":0.35297532249204299770184434237307868897914886474609375}],["This theorem states that for any two sets `s` and `t`, where `s` is a set of type `Œ±` and `t` is a set of type `Œ≤`, the Cartesian product of `s` and `t` (`s √óÀ¢ t`) is a subset of the preimage of `t` under the function `Prod.snd`. In other words, every pair `(a, b)` in the Cartesian product, where `a` is from `s` and `b` is from `t`, maps to an element in `t` under the function `Prod.snd`, which extracts the second component of the pair.",{"type":"‚àÄ {Œ± : Type u_1} {Œ≤ : Type u_2} (s : Set Œ±) (t : Set Œ≤), s √óÀ¢ t ‚äÜ Prod.snd ‚Åª¬π' t","name":"Set.prod_subset_preimage_snd","isProp":true,"docString":"This theorem states that for any two sets `s` and `t`, where `s` is a set of type `Œ±` and `t` is a set of type `Œ≤`, the Cartesian product of `s` and `t` (`s √óÀ¢ t`) is a subset of the preimage of `t` under the function `Prod.snd`. In other words, every pair `(a, b)` in the Cartesian product, where `a` is from `s` and `b` is from `t`, maps to an element in `t` under the function `Prod.snd`, which extracts the second component of the pair.","distance":0.343022082362980373915206655510701239109039306640625}],["Product of two homeomorphisms. ",{"type":"{X : Type u_1} ‚Üí\n  {Y : Type u_2} ‚Üí\n    [inst : TopologicalSpace X] ‚Üí\n      [inst_1 : TopologicalSpace Y] ‚Üí\n        {X' : Type u_4} ‚Üí\n          {Y' : Type u_5} ‚Üí\n            [inst_2 : TopologicalSpace X'] ‚Üí [inst_3 : TopologicalSpace Y'] ‚Üí X ‚âÉ‚Çú X' ‚Üí Y ‚âÉ‚Çú Y' ‚Üí X √ó Y ‚âÉ‚Çú X' √ó Y'","name":"Homeomorph.prodCongr","isProp":false,"docString":"Product of two homeomorphisms. ","distance":0.295882027844361294999231404290185309946537017822265625}],["The product of two positive elements is positive. ",{"type":"‚àÄ {Œ± : Type u} [self : StrictOrderedRing Œ±] (a b : Œ±), 0 < a ‚Üí 0 < b ‚Üí 0 < a * b","name":"StrictOrderedRing.mul_pos","isProp":true,"docString":"The product of two positive elements is positive. ","distance":0.2997328279938320516606609089649282395839691162109375}],["The prod of two morphisms is a morphism. ",{"type":"{R : Type u} ‚Üí\n  {A : Type v} ‚Üí\n    {B : Type w} ‚Üí\n      {C : Type w‚ÇÅ} ‚Üí\n        [inst : Monoid R] ‚Üí\n          [inst_1 : NonUnitalNonAssocSemiring A] ‚Üí\n            [inst_2 : DistribMulAction R A] ‚Üí\n              [inst_3 : NonUnitalNonAssocSemiring B] ‚Üí\n                [inst_4 : DistribMulAction R B] ‚Üí\n                  [inst_5 : NonUnitalNonAssocSemiring C] ‚Üí\n                    [inst_6 : DistribMulAction R C] ‚Üí (A ‚Üí‚Çô‚Çê[R] B) ‚Üí (A ‚Üí‚Çô‚Çê[R] C) ‚Üí A ‚Üí‚Çô‚Çê[R] B √ó C","name":"NonUnitalAlgHom.prod","isProp":false,"docString":"The prod of two morphisms is a morphism. ","distance":0.29998240158550626421884999217581935226917266845703125}],["The equivalence between the opposite of a product and the product of the opposites. ",{"type":"(C : Type u‚ÇÉ) ‚Üí\n  [inst : CategoryTheory.Category.{v‚ÇÉ, u‚ÇÉ} C] ‚Üí\n    {D : Type u‚ÇÑ} ‚Üí [inst_1 : CategoryTheory.Category.{v‚ÇÑ, u‚ÇÑ} D] ‚Üí (C √ó D)·µí·µñ ‚âå C·µí·µñ √ó D·µí·µñ","name":"CategoryTheory.prodOpEquiv","isProp":false,"docString":"The equivalence between the opposite of a product and the product of the opposites. ","distance":0.300276694356411300024234378724941052496433258056640625}],["Binary coproducts are symmetric. ",{"type":"{C : Type u} ‚Üí\n  [inst : CategoryTheory.Category.{v, u} C] ‚Üí\n    {X Y : C} ‚Üí\n      {c : CategoryTheory.Limits.BinaryCofan X Y} ‚Üí\n        CategoryTheory.Limits.IsColimit c ‚Üí\n          CategoryTheory.Limits.IsColimit\n            (CategoryTheory.Limits.BinaryCofan.mk (CategoryTheory.Limits.BinaryCofan.inr c)\n              (CategoryTheory.Limits.BinaryCofan.inl c))","name":"CategoryTheory.Limits.BinaryCofan.isColimitFlip","isProp":false,"docString":"Binary coproducts are symmetric. ","distance":0.30101190827223545110058466889313422143459320068359375}],["The vector cons operation ",{"type":"Lean.TrailingParserDescr","name":"Vector3.¬´term_::_¬ª","isProp":false,"docString":"The vector cons operation ","distance":0.30192336797720731311756026116199791431427001953125}],["The product of two two-pointings. ",{"type":"{Œ± : Type u_1} ‚Üí {Œ≤ : Type u_2} ‚Üí TwoPointing Œ± ‚Üí TwoPointing Œ≤ ‚Üí TwoPointing (Œ± √ó Œ≤)","name":"TwoPointing.prod","isProp":false,"docString":"The product of two two-pointings. ","distance":0.305453575444542269057279781918623484671115875244140625}],["The product of two lower sets as a lower set. ",{"type":"{Œ± : Type u_1} ‚Üí\n  {Œ≤ : Type u_2} ‚Üí [inst : Preorder Œ±] ‚Üí [inst_1 : Preorder Œ≤] ‚Üí LowerSet Œ± ‚Üí LowerSet Œ≤ ‚Üí LowerSet (Œ± √ó Œ≤)","name":"LowerSet.prod","isProp":false,"docString":"The product of two lower sets as a lower set. ","distance":0.309007891974197590467809959591249935328960418701171875}],["An inner product with a sum on the left. ",{"type":"‚àÄ {ùïú : Type u_1} {E : Type u_2} [inst : IsROrC ùïú] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace ùïú E]\n  {Œπ : Type u_4} (s : Finset Œπ) (f : Œπ ‚Üí E) (x : E), ‚ü™Finset.sum s fun i => f i, x‚ü´_ùïú = Finset.sum s fun i => ‚ü™f i, x‚ü´_ùïú","name":"sum_inner","isProp":true,"docString":"An inner product with a sum on the left. ","distance":0.3095327456770051721690606427728198468685150146484375}],["The projection onto the second summand of a binary biproduct. ",{"type":"{C : Type u} ‚Üí\n  [inst : CategoryTheory.Category.{v, u} C] ‚Üí\n    [inst_1 : CategoryTheory.Limits.HasZeroMorphisms C] ‚Üí\n      {X Y : C} ‚Üí [inst_2 : CategoryTheory.Limits.HasBinaryBiproduct X Y] ‚Üí X ‚äû Y ‚ü∂ Y","name":"CategoryTheory.Limits.biprod.snd","isProp":false,"docString":"The projection onto the second summand of a binary biproduct. ","distance":0.310597473303185711568374927082913927733898162841796875}],["The product of two partial equivalences, as a partial equivalence on the product. ",{"type":"{Œ± : Type u_1} ‚Üí\n  {Œ≤ : Type u_2} ‚Üí {Œ≥ : Type u_3} ‚Üí {Œ¥ : Type u_4} ‚Üí PartialEquiv Œ± Œ≤ ‚Üí PartialEquiv Œ≥ Œ¥ ‚Üí PartialEquiv (Œ± √ó Œ≥) (Œ≤ √ó Œ¥)","name":"PartialEquiv.prod","isProp":false,"docString":"The product of two partial equivalences, as a partial equivalence on the product. ","distance":0.311445078364146199501050205071805976331233978271484375}],["An inner product with a sum on the right. ",{"type":"‚àÄ {ùïú : Type u_1} {E : Type u_2} [inst : IsROrC ùïú] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace ùïú E]\n  {Œπ : Type u_4} (s : Finset Œπ) (f : Œπ ‚Üí E) (x : E), ‚ü™x, Finset.sum s fun i => f i‚ü´_ùïú = Finset.sum s fun i => ‚ü™x, f i‚ü´_ùïú","name":"inner_sum","isProp":true,"docString":"An inner product with a sum on the right. ","distance":0.314110017027901811115242480809683911502361297607421875}],["The second projection from the product. ",{"type":"{X Y : TopCat} ‚Üí TopCat.of (‚ÜëX √ó ‚ÜëY) ‚ü∂ Y","name":"TopCat.prodSnd","isProp":false,"docString":"The second projection from the product. ","distance":0.31484301593316310619030673478846438229084014892578125}],["The projection onto a summand of a biproduct. ",{"type":"{J : Type w} ‚Üí\n  {C : Type u} ‚Üí\n    [inst : CategoryTheory.Category.{v, u} C] ‚Üí\n      [inst_1 : CategoryTheory.Limits.HasZeroMorphisms C] ‚Üí\n        (f : J ‚Üí C) ‚Üí [inst_2 : CategoryTheory.Limits.HasBiproduct f] ‚Üí (b : J) ‚Üí ‚®Å f ‚ü∂ f b","name":"CategoryTheory.Limits.biproduct.œÄ","isProp":false,"docString":"The projection onto a summand of a biproduct. ","distance":0.315079790023591765901755934464745223522186279296875}],["The cartesian product of two natural transformations. ",{"type":"{A : Type u‚ÇÅ} ‚Üí\n  [inst : CategoryTheory.Category.{v‚ÇÅ, u‚ÇÅ} A] ‚Üí\n    {B : Type u‚ÇÇ} ‚Üí\n      [inst_1 : CategoryTheory.Category.{v‚ÇÇ, u‚ÇÇ} B] ‚Üí\n        {C : Type u‚ÇÉ} ‚Üí\n          [inst_2 : CategoryTheory.Category.{v‚ÇÉ, u‚ÇÉ} C] ‚Üí\n            {D : Type u‚ÇÑ} ‚Üí\n              [inst_3 : CategoryTheory.Category.{v‚ÇÑ, u‚ÇÑ} D] ‚Üí\n                {F G : CategoryTheory.Functor A B} ‚Üí\n                  {H I : CategoryTheory.Functor C D} ‚Üí\n                    (F ‚ü∂ G) ‚Üí (H ‚ü∂ I) ‚Üí (CategoryTheory.Functor.prod F H ‚ü∂ CategoryTheory.Functor.prod G I)","name":"CategoryTheory.NatTrans.prod","isProp":false,"docString":"The cartesian product of two natural transformations. ","distance":0.31694014309392015693589428337872959673404693603515625}],["Expressing the product of two polynomials as a double sum. ",{"type":"‚àÄ {R : Type u} [inst : Semiring R] {p q : Polynomial R},\n  p * q =\n    Finset.sum (Polynomial.support p) fun i =>\n      Polynomial.sum q fun j a => (Polynomial.monomial (i + j)) (Polynomial.coeff p i * a)","name":"Polynomial.mul_eq_sum_sum","isProp":true,"docString":"Expressing the product of two polynomials as a double sum. ","distance":0.31755882000249402441482970971264876425266265869140625}],["The set product of two sets is equivalent to the type product of their coercions to types. ",{"type":"{Œ± : Type u_1} ‚Üí {Œ≤ : Type u_2} ‚Üí (s : Set Œ±) ‚Üí (t : Set Œ≤) ‚Üí ‚Üë(s √óÀ¢ t) ‚âÉ ‚Üës √ó ‚Üët","name":"Equiv.Set.prod","isProp":false,"docString":"The set product of two sets is equivalent to the type product of their coercions to types. ","distance":0.319490088259057281039332565342192538082599639892578125}],["The tensor product of two holors. ",{"type":"{Œ± : Type} ‚Üí {ds‚ÇÅ ds‚ÇÇ : List ‚Ñï} ‚Üí [inst : Mul Œ±] ‚Üí Holor Œ± ds‚ÇÅ ‚Üí Holor Œ± ds‚ÇÇ ‚Üí Holor Œ± (ds‚ÇÅ ++ ds‚ÇÇ)","name":"Holor.mul","isProp":false,"docString":"The tensor product of two holors. ","distance":0.319674820253610214582096205049310810863971710205078125}]]