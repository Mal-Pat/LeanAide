[["The product of two two-pointings. ",{"type":"{α : Type u_1} → {β : Type u_2} → TwoPointing α → TwoPointing β → TwoPointing (α × β)","name":"TwoPointing.prod","isProp":false,"docString":"The product of two two-pointings. ","distance":0.305094266277779413432114097304292954504489898681640625}],[" For all natural numbers `n`, the product of `n` and `n-1` is an even number. Equivalently, the product of two consecutive natural numbers is an even number.",{"type":"∀ (n : ℕ), Even (n * (n - 1))","name":"Nat.even_mul_self_pred","isProp":true,"docString":" For all natural numbers `n`, the product of `n` and `n-1` is an even number. Equivalently, the product of two consecutive natural numbers is an even number.","distance":0.3894954098481491211458660472999326884746551513671875}],["The theorem `Finset.prod_congr` states that for any two sets `s₁` and `s₂` of the same type `α`, and any two functions `f` and `g` from `α` to another type `β` (where `β` is a commutative monoid), if `s₁` and `s₂` are the same, and `f(x)` equals `g(x)` for every element `x` in `s₂`, then the product of `f(x)` over all elements `x` in `s₁` is equal to the product of `g(x)` over all elements `x` in `s₂`. In mathematical terms, if $s_1 = s_2$ and $f(x) = g(x)$ for all $x \\in s_2$, then $\\prod_{x \\in s_1} f(x) = \\prod_{x \\in s_2} g(x)$.",{"type":"∀ {α : Type u_3} {β : Type u_4} {s₁ s₂ : Finset α} {f g : α → β} [inst : CommMonoid β],\n  s₁ = s₂ → (∀ x ∈ s₂, f x = g x) → s₁.prod f = s₂.prod g","name":"Finset.prod_congr","isProp":true,"docString":"The theorem `Finset.prod_congr` states that for any two sets `s₁` and `s₂` of the same type `α`, and any two functions `f` and `g` from `α` to another type `β` (where `β` is a commutative monoid), if `s₁` and `s₂` are the same, and `f(x)` equals `g(x)` for every element `x` in `s₂`, then the product of `f(x)` over all elements `x` in `s₁` is equal to the product of `g(x)` over all elements `x` in `s₂`. In mathematical terms, if $s_1 = s_2$ and $f(x) = g(x)$ for all $x \\in s_2$, then $\\prod_{x \\in s_1} f(x) = \\prod_{x \\in s_2} g(x)$.","distance":0.3712873537876519858258461681543849408626556396484375}],["Product of two rings is a ring. ",{"type":"{R : Type u_3} → {S : Type u_5} → [inst : Ring R] → [inst : Ring S] → Ring (R × S)","name":"Prod.instRing","isProp":false,"docString":"Product of two rings is a ring. ","distance":0.309013473690379181224585636300616897642612457275390625}],[" The second component of the product of two dual numbers is equal to the sum of the product of their first components and the product of their second components.",{"type":"∀ {R : Type u_1} [inst : Semiring R] (x y : DualNumber R),\n  TrivSqZeroExt.snd (x * y) = TrivSqZeroExt.fst x * TrivSqZeroExt.snd y + TrivSqZeroExt.snd x * TrivSqZeroExt.fst y","name":"DualNumber.snd_mul","isProp":true,"docString":" The second component of the product of two dual numbers is equal to the sum of the product of their first components and the product of their second components.","distance":0.392946034058178905734592945009353570640087127685546875}],["The theorem `Finset.prod_range_succ'` states that for any commutative monoid `β` and any function `f` from natural numbers to `β`, the product of `f k` for `k` in the range `0` to `n + 1` (exclusive) is equal to the product of `f (k + 1)` for `k` in the range `0` to `n` (exclusive) times `f 0`. In other words, given a function `f` from the natural numbers to `β`, the product over the first `n + 1` natural numbers is equal to `f 0` times the product over the next `n` natural numbers.",{"type":"∀ {β : Type u_4} [inst : CommMonoid β] (f : ℕ → β) (n : ℕ),\n  ((Finset.range (n + 1)).prod fun k => f k) = ((Finset.range n).prod fun k => f (k + 1)) * f 0","name":"Finset.prod_range_succ'","isProp":true,"docString":"The theorem `Finset.prod_range_succ'` states that for any commutative monoid `β` and any function `f` from natural numbers to `β`, the product of `f k` for `k` in the range `0` to `n + 1` (exclusive) is equal to the product of `f (k + 1)` for `k` in the range `0` to `n` (exclusive) times `f 0`. In other words, given a function `f` from the natural numbers to `β`, the product over the first `n + 1` natural numbers is equal to `f 0` times the product over the next `n` natural numbers.","distance":0.374706295065505956554119393331347964704036712646484375}],["Product of two uniform isomorphisms. ",{"type":"{α : Type u} →\n  {β : Type u_1} →\n    {γ : Type u_2} →\n      {δ : Type u_3} →\n        [inst : UniformSpace α] →\n          [inst_1 : UniformSpace β] →\n            [inst_2 : UniformSpace γ] → [inst_3 : UniformSpace δ] → α ≃ᵤ β → γ ≃ᵤ δ → α × γ ≃ᵤ β × δ","name":"UniformEquiv.prodCongr","isProp":false,"docString":"Product of two uniform isomorphisms. ","distance":0.316967383053200435494289877169649116694927215576171875}],["Notation for the product ",{"type":"Lean.TrailingParserDescr","name":"CategoryTheory.Limits.«term_⨯_»","isProp":false,"docString":"Notation for the product ","distance":0.323326906328329555240230774870724417269229888916015625}],["Product of two homeomorphisms. ",{"type":"{X : Type u_1} →\n  {Y : Type u_2} →\n    [inst : TopologicalSpace X] →\n      [inst_1 : TopologicalSpace Y] →\n        {X' : Type u_4} →\n          {Y' : Type u_5} →\n            [inst_2 : TopologicalSpace X'] → [inst_3 : TopologicalSpace Y'] → X ≃ₜ X' → Y ≃ₜ Y' → X × Y ≃ₜ X' × Y'","name":"Homeomorph.prodCongr","isProp":false,"docString":"Product of two homeomorphisms. ","distance":0.327662199484336447152799109971965663135051727294921875}],["The prod of two morphisms is a morphism. ",{"type":"{R : Type u} →\n  {A : Type v} →\n    {B : Type w} →\n      {C : Type w₁} →\n        [inst : Monoid R] →\n          [inst_1 : NonUnitalNonAssocSemiring A] →\n            [inst_2 : DistribMulAction R A] →\n              [inst_3 : NonUnitalNonAssocSemiring B] →\n                [inst_4 : DistribMulAction R B] →\n                  [inst_5 : NonUnitalNonAssocSemiring C] →\n                    [inst_6 : DistribMulAction R C] → (A →ₙₐ[R] B) → (A →ₙₐ[R] C) → A →ₙₐ[R] B × C","name":"NonUnitalAlgHom.prod","isProp":false,"docString":"The prod of two morphisms is a morphism. ","distance":0.3281458652201540981963034937507472932338714599609375}],["The second projection from the product. ",{"type":"{X Y : TopCat} → TopCat.of (↑X × ↑Y) ⟶ Y","name":"TopCat.prodSnd","isProp":false,"docString":"The second projection from the product. ","distance":0.329114550965713570374049368183477781713008880615234375}],["The product of two upper sets as an upper set. ",{"type":"{α : Type u_1} →\n  {β : Type u_2} → [inst : Preorder α] → [inst_1 : Preorder β] → UpperSet α → UpperSet β → UpperSet (α × β)","name":"UpperSet.prod","isProp":false,"docString":"The product of two upper sets as an upper set. ","distance":0.329658226440005364121788034026394598186016082763671875}],["Product of two commutative semirings is a commutative semiring. ",{"type":"{R : Type u_3} → {S : Type u_5} → [inst : CommSemiring R] → [inst : CommSemiring S] → CommSemiring (R × S)","name":"Prod.instCommSemiring","isProp":false,"docString":"Product of two commutative semirings is a commutative semiring. ","distance":0.331301409783622269333847043526475317776203155517578125}],["Product of two semirings is a semiring. ",{"type":"{R : Type u_3} → {S : Type u_5} → [inst : Semiring R] → [inst : Semiring S] → Semiring (R × S)","name":"Prod.instSemiring","isProp":false,"docString":"Product of two semirings is a semiring. ","distance":0.332707194548301166125980898868874646723270416259765625}],["The product of two lower sets as a lower set. ",{"type":"{α : Type u_1} →\n  {β : Type u_2} → [inst : Preorder α] → [inst_1 : Preorder β] → LowerSet α → LowerSet β → LowerSet (α × β)","name":"LowerSet.prod","isProp":false,"docString":"The product of two lower sets as a lower set. ","distance":0.333824580747061450125556802959181368350982666015625}],["Product of two continuous linear equivalences. The map comes from `Equiv.prodCongr`. ",{"type":"{R₁ : Type u_1} →\n  [inst : Semiring R₁] →\n    {M₁ : Type u_4} →\n      [inst_1 : TopologicalSpace M₁] →\n        [inst_2 : AddCommMonoid M₁] →\n          {M₂ : Type u_6} →\n            [inst_3 : TopologicalSpace M₂] →\n              [inst_4 : AddCommMonoid M₂] →\n                {M₃ : Type u_7} →\n                  [inst_5 : TopologicalSpace M₃] →\n                    [inst_6 : AddCommMonoid M₃] →\n                      {M₄ : Type u_8} →\n                        [inst_7 : TopologicalSpace M₄] →\n                          [inst_8 : AddCommMonoid M₄] →\n                            [inst_9 : Module R₁ M₁] →\n                              [inst_10 : Module R₁ M₂] →\n                                [inst_11 : Module R₁ M₃] →\n                                  [inst_12 : Module R₁ M₄] → (M₁ ≃L[R₁] M₂) → (M₃ ≃L[R₁] M₄) → (M₁ × M₃) ≃L[R₁] M₂ × M₄","name":"ContinuousLinearEquiv.prod","isProp":false,"docString":"Product of two continuous linear equivalences. The map comes from `Equiv.prodCongr`. ","distance":0.335145481557711344411387699437909759581089019775390625}],["Product of two kernels. This is meaningful only when the kernels are s-finite. ",{"type":"{α : Type u_1} →\n  {β : Type u_2} →\n    {mα : MeasurableSpace α} →\n      {mβ : MeasurableSpace β} →\n        {γ : Type u_4} →\n          {mγ : MeasurableSpace γ} →\n            ↥(ProbabilityTheory.kernel α β) → ↥(ProbabilityTheory.kernel α γ) → ↥(ProbabilityTheory.kernel α (β × γ))","name":"ProbabilityTheory.kernel.prod","isProp":false,"docString":"Product of two kernels. This is meaningful only when the kernels are s-finite. ","distance":0.335453649883738436177083030997891910374164581298828125}],["The product of two finite adèles is a finite adèle. ",{"type":"∀ {R : Type u_1} {K : Type u_2} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : IsDedekindDomain R]\n  [inst_3 : Field K] [inst_4 : Algebra R K] [inst_5 : IsFractionRing R K]\n  {x y : DedekindDomain.ProdAdicCompletions R K},\n  DedekindDomain.ProdAdicCompletions.IsFiniteAdele x →\n    DedekindDomain.ProdAdicCompletions.IsFiniteAdele y → DedekindDomain.ProdAdicCompletions.IsFiniteAdele (x * y)","name":"DedekindDomain.ProdAdicCompletions.IsFiniteAdele.mul","isProp":true,"docString":"The product of two finite adèles is a finite adèle. ","distance":0.336360231085966188135927268376690335571765899658203125}],["The prod of two linear maps is a linear map. ",{"type":"{R : Type u} →\n  {M : Type v} →\n    {M₂ : Type w} →\n      {M₃ : Type y} →\n        [inst : Semiring R] →\n          [inst_1 : AddCommMonoid M] →\n            [inst_2 : AddCommMonoid M₂] →\n              [inst_3 : AddCommMonoid M₃] →\n                [inst_4 : Module R M] →\n                  [inst_5 : Module R M₂] → [inst_6 : Module R M₃] → (M →ₗ[R] M₂) → (M →ₗ[R] M₃) → M →ₗ[R] M₂ × M₃","name":"LinearMap.prod","isProp":false,"docString":"The prod of two linear maps is a linear map. ","distance":0.33861115250128381859440196421928703784942626953125}],["The alternating product of a list. ",{"type":"{G : Type u_1} → [inst : One G] → [inst : Mul G] → [inst : Inv G] → List G → G","name":"List.alternatingProd","isProp":false,"docString":"The alternating product of a list. ","distance":0.33880523505736415135203287718468345701694488525390625}],["Product of two commutative rings is a commutative ring. ",{"type":"{R : Type u_3} → {S : Type u_5} → [inst : CommRing R] → [inst : CommRing S] → CommRing (R × S)","name":"Prod.instCommRing","isProp":false,"docString":"Product of two commutative rings is a commutative ring. ","distance":0.33957914043283643490411805032636038959026336669921875}],["Expressing the product of two polynomials as a double sum. ",{"type":"∀ {R : Type u} [inst : Semiring R] {p q : Polynomial R},\n  p * q =\n    Finset.sum (Polynomial.support p) fun i =>\n      Polynomial.sum q fun j a => (Polynomial.monomial (i + j)) (Polynomial.coeff p i * a)","name":"Polynomial.mul_eq_sum_sum","isProp":true,"docString":"Expressing the product of two polynomials as a double sum. ","distance":0.340144420523236679088086020783521234989166259765625}],["An inner product with a sum on the left. ",{"type":"∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  {ι : Type u_4} (s : Finset ι) (f : ι → E) (x : E), ⟪Finset.sum s fun i => f i, x⟫_𝕜 = Finset.sum s fun i => ⟪f i, x⟫_𝕜","name":"sum_inner","isProp":true,"docString":"An inner product with a sum on the left. ","distance":0.34041436223577481445801140580442734062671661376953125}],["An inner product with a sum on the right. ",{"type":"∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  {ι : Type u_4} (s : Finset ι) (f : ι → E) (x : E), ⟪x, Finset.sum s fun i => f i⟫_𝕜 = Finset.sum s fun i => ⟪x, f i⟫_𝕜","name":"inner_sum","isProp":true,"docString":"An inner product with a sum on the right. ","distance":0.340829601261508130516375558727304451167583465576171875}]]