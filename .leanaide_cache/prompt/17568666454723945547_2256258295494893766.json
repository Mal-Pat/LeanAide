[["Generate one more `Nat` ",{"type":"{g : Type} → {m : Type → Type u_1} → [inst : RandomGen g] → [inst : Monad m] → RandGT g m ℕ","name":"Rand.next","isProp":false,"docString":"Generate one more `Nat` ","distance":0.308731919249655761827710875877528451383113861083984375}],[" For all natural numbers `n`, the product of `n` and `n-1` is an even number. Equivalently, the product of two consecutive natural numbers is an even number.",{"type":"∀ (n : ℕ), Even (n * (n - 1))","name":"Nat.even_mul_self_pred","isProp":true,"docString":" For all natural numbers `n`, the product of `n` and `n-1` is an even number. Equivalently, the product of two consecutive natural numbers is an even number.","distance":0.32391271103410235188135857242741622030735015869140625}],["This theorem states that for all numbers `m` and `n` of type `Num`, the casting of the product of `m` and `n` into a `Nat` (natural number) is equal to the product of `m` cast to a `Nat` and `n` cast to a `Nat`. In mathematical terms, for all `m` and `n`, `(m * n)` cast to a natural number is equal to `(m` cast to a natural number`) * (n` cast to a natural number`).",{"type":"∀ (m n : Num), ↑(m * n) = ↑m * ↑n","name":"Num.mul_to_nat","isProp":true,"docString":"This theorem states that for all numbers `m` and `n` of type `Num`, the casting of the product of `m` and `n` into a `Nat` (natural number) is equal to the product of `m` cast to a `Nat` and `n` cast to a `Nat`. In mathematical terms, for all `m` and `n`, `(m * n)` cast to a natural number is equal to `(m` cast to a natural number`) * (n` cast to a natural number`).","distance":0.32419874065024323339656575626577250659465789794921875}],["The sum of two natural transformations. ",{"type":"{A : Type u₁} →\n  [inst : CategoryTheory.Category.{v₁, u₁} A] →\n    {B : Type u₁} →\n      [inst_1 : CategoryTheory.Category.{v₁, u₁} B] →\n        {C : Type u₁} →\n          [inst_2 : CategoryTheory.Category.{v₁, u₁} C] →\n            {D : Type u₁} →\n              [inst_3 : CategoryTheory.Category.{v₁, u₁} D] →\n                {F G : CategoryTheory.Functor A B} →\n                  {H I : CategoryTheory.Functor C D} →\n                    (F ⟶ G) → (H ⟶ I) → (CategoryTheory.Functor.sum F H ⟶ CategoryTheory.Functor.sum G I)","name":"CategoryTheory.NatTrans.sum","isProp":false,"docString":"The sum of two natural transformations. ","distance":0.328129353444952920337840396314277313649654388427734375}],[" For any natural number `n`, `n = Nat.bodd n * 2 * Nat.div2 n + Nat.abs (Nat.sub n (2 * Nat.div2 n))`.",{"type":"∀ (n : ℕ), (bif n.bodd then 1 else 0) + 2 * n.div2 = n","name":"Nat.bodd_add_div2","isProp":true,"docString":" For any natural number `n`, `n = Nat.bodd n * 2 * Nat.div2 n + Nat.abs (Nat.sub n (2 * Nat.div2 n))`.","distance":0.34593900468703264738934421984595246613025665283203125}],["The theorem `Nat.prod_factors` in Lean 4 asserts that for every natural number `n` such that `n` is not equal to zero, the product of the list of its prime factors (as given by the function `Nat.factors n`) equals the number `n` itself. In other words, if you take a non-zero natural number, find all its prime factors, and multiply them together, you get the original number back. This is a formalization of the fundamental theorem of arithmetic, which states that every integer greater than 1 either is a prime number itself or can be factored as a product of primes in an essentially unique way.",{"type":"∀ {n : ℕ}, n ≠ 0 → n.factors.prod = n","name":"Nat.prod_factors","isProp":true,"docString":"The theorem `Nat.prod_factors` in Lean 4 asserts that for every natural number `n` such that `n` is not equal to zero, the product of the list of its prime factors (as given by the function `Nat.factors n`) equals the number `n` itself. In other words, if you take a non-zero natural number, find all its prime factors, and multiply them together, you get the original number back. This is a formalization of the fundamental theorem of arithmetic, which states that every integer greater than 1 either is a prime number itself or can be factored as a product of primes in an essentially unique way.","distance":0.32984013311582172089941877857199870049953460693359375}],["The cartesian product of two natural transformations. ",{"type":"{A : Type u₁} →\n  [inst : CategoryTheory.Category.{v₁, u₁} A] →\n    {B : Type u₂} →\n      [inst_1 : CategoryTheory.Category.{v₂, u₂} B] →\n        {C : Type u₃} →\n          [inst_2 : CategoryTheory.Category.{v₃, u₃} C] →\n            {D : Type u₄} →\n              [inst_3 : CategoryTheory.Category.{v₄, u₄} D] →\n                {F G : CategoryTheory.Functor A B} →\n                  {H I : CategoryTheory.Functor C D} →\n                    (F ⟶ G) → (H ⟶ I) → (CategoryTheory.Functor.prod F H ⟶ CategoryTheory.Functor.prod G I)","name":"CategoryTheory.NatTrans.prod","isProp":false,"docString":"The cartesian product of two natural transformations. ","distance":0.330454140073612678829562128157704137265682220458984375}],["The cartesian product of two natural isomorphisms. ",{"type":"{A : Type u₁} →\n  [inst : CategoryTheory.Category.{v₁, u₁} A] →\n    {B : Type u₂} →\n      [inst_1 : CategoryTheory.Category.{v₂, u₂} B] →\n        {C : Type u₃} →\n          [inst_2 : CategoryTheory.Category.{v₃, u₃} C] →\n            {D : Type u₄} →\n              [inst_3 : CategoryTheory.Category.{v₄, u₄} D] →\n                {F F' : CategoryTheory.Functor A B} →\n                  {G G' : CategoryTheory.Functor C D} →\n                    (F ≅ F') → (G ≅ G') → (CategoryTheory.Functor.prod F G ≅ CategoryTheory.Functor.prod F' G')","name":"CategoryTheory.NatIso.prod","isProp":false,"docString":"The cartesian product of two natural isomorphisms. ","distance":0.332447541656093026318785632611252367496490478515625}],["The prod of two morphisms is a morphism. ",{"type":"{R : Type u} →\n  {A : Type v} →\n    {B : Type w} →\n      {C : Type w₁} →\n        [inst : Monoid R] →\n          [inst_1 : NonUnitalNonAssocSemiring A] →\n            [inst_2 : DistribMulAction R A] →\n              [inst_3 : NonUnitalNonAssocSemiring B] →\n                [inst_4 : DistribMulAction R B] →\n                  [inst_5 : NonUnitalNonAssocSemiring C] →\n                    [inst_6 : DistribMulAction R C] → (A →ₙₐ[R] B) → (A →ₙₐ[R] C) → A →ₙₐ[R] B × C","name":"NonUnitalAlgHom.prod","isProp":false,"docString":"The prod of two morphisms is a morphism. ","distance":0.33411119925597976276776535087265074253082275390625}],["Two finite cardinals are equal iff they are equal their to_nat are equal ",{"type":"∀ {c d : Cardinal.{u_1}}, c < Cardinal.aleph0 → d < Cardinal.aleph0 → (Cardinal.toNat c = Cardinal.toNat d ↔ c = d)","name":"Cardinal.toNat_eq_iff_eq_of_lt_aleph0","isProp":true,"docString":"Two finite cardinals are equal iff they are equal their to_nat are equal ","distance":0.334642967418102676990798727274523116648197174072265625}],["Product of two rings is a ring. ",{"type":"{R : Type u_3} → {S : Type u_5} → [inst : Ring R] → [inst : Ring S] → Ring (R × S)","name":"Prod.instRing","isProp":false,"docString":"Product of two rings is a ring. ","distance":0.338889818307715418033154719523736275732517242431640625}],["Product of two uniform isomorphisms. ",{"type":"{α : Type u} →\n  {β : Type u_1} →\n    {γ : Type u_2} →\n      {δ : Type u_3} →\n        [inst : UniformSpace α] →\n          [inst_1 : UniformSpace β] →\n            [inst_2 : UniformSpace γ] → [inst_3 : UniformSpace δ] → α ≃ᵤ β → γ ≃ᵤ δ → α × γ ≃ᵤ β × δ","name":"UniformEquiv.prodCongr","isProp":false,"docString":"Product of two uniform isomorphisms. ","distance":0.339083852975934296747340113142854534089565277099609375}],["The set of natural numbers that are sums of two squares is closed under multiplication. ",{"type":"∀ {a b x y u v : ℕ}, a = x ^ 2 + y ^ 2 → b = u ^ 2 + v ^ 2 → ∃ r s, a * b = r ^ 2 + s ^ 2","name":"Nat.sq_add_sq_mul","isProp":true,"docString":"The set of natural numbers that are sums of two squares is closed under multiplication. ","distance":0.341304534169549089739348346483893692493438720703125}],["The product of two natural numbers is greater than 1 if and only if\nat least one of them is greater than 1 and both are positive. ",{"type":"∀ {m n : ℕ}, 1 < m * n ↔ 0 < m ∧ 0 < n ∧ (1 < m ∨ 1 < n)","name":"Nat.one_lt_mul_iff","isProp":true,"docString":"The product of two natural numbers is greater than 1 if and only if\nat least one of them is greater than 1 and both are positive. ","distance":0.343235999091696830642916893339133821427822113037109375}],["An equivalence between `ℕ+` and `ℕ` given by `PNat.natPred` and `Nat.succPNat`. ",{"type":"ℕ+ ≃ ℕ","name":"Equiv.pnatEquivNat","isProp":false,"docString":"An equivalence between `ℕ+` and `ℕ` given by `PNat.natPred` and `Nat.succPNat`. ","distance":0.345049566093007020750604851855314336717128753662109375}],["Product of two homeomorphisms. ",{"type":"{X : Type u_1} →\n  {Y : Type u_2} →\n    [inst : TopologicalSpace X] →\n      [inst_1 : TopologicalSpace Y] →\n        {X' : Type u_4} →\n          {Y' : Type u_5} →\n            [inst_2 : TopologicalSpace X'] → [inst_3 : TopologicalSpace Y'] → X ≃ₜ X' → Y ≃ₜ Y' → X × Y ≃ₜ X' × Y'","name":"Homeomorph.prodCongr","isProp":false,"docString":"Product of two homeomorphisms. ","distance":0.34782458468972687892772910345229320228099822998046875}],["`natAdd n i` adds `n` to `i` \"on the left\". ",{"type":"{m : ℕ} → (n : ℕ) → Fin m → Fin (n + m)","name":"Fin.natAdd","isProp":false,"docString":"`natAdd n i` adds `n` to `i` \"on the left\". ","distance":0.35113967099217291423229880820144899189472198486328125}],["Another `mk` using ℕ and ℕ+ ",{"type":"ℕ+ → ℕ → ℕ → ℕ+ → ℕ+ → ℕ+ → PNat.XgcdType","name":"PNat.XgcdType.mk'","isProp":false,"docString":"Another `mk` using ℕ and ℕ+ ","distance":0.35169178814303780900019091859576292335987091064453125}],["The stream of natural numbers: `Stream'.get n Stream'.nats = n`. ",{"type":"Stream' ℕ","name":"Stream'.nats","isProp":false,"docString":"The stream of natural numbers: `Stream'.get n Stream'.nats = n`. ","distance":0.35330456380070518473957008609431795775890350341796875}],["Product of two `NonUnitalSemiring`s is a `NonUnitalSemiring`. ",{"type":"{R : Type u_3} →\n  {S : Type u_5} → [inst : NonUnitalSemiring R] → [inst : NonUnitalSemiring S] → NonUnitalSemiring (R × S)","name":"Prod.instNonUnitalSemiring","isProp":false,"docString":"Product of two `NonUnitalSemiring`s is a `NonUnitalSemiring`. ","distance":0.354971885195848713134836316385190002620220184326171875}],["Multiplication by a natural number. ",{"type":"{M : Type u} → [self : AddMonoid M] → ℕ → M → M","name":"AddMonoid.nsmul","isProp":false,"docString":"Multiplication by a natural number. ","distance":0.35502317542867956046137578596244566142559051513671875}],["The central binomial coefficient, `Nat.choose (2 * n) n`.\n",{"type":"ℕ → ℕ","name":"Nat.centralBinom","isProp":false,"docString":"The central binomial coefficient, `Nat.choose (2 * n) n`.\n","distance":0.35515929281252722748973837951780296862125396728515625}],["Matches raw nat lits. ",{"type":"ℕ → Mathlib.Notation3.Matcher","name":"Mathlib.Notation3.natLitMatcher","isProp":false,"docString":"Matches raw nat lits. ","distance":0.35894175168646069717937052701017819344997406005859375}],["Expressing the product of two polynomials as a double sum. ",{"type":"∀ {R : Type u} [inst : Semiring R] {p q : Polynomial R},\n  p * q =\n    Finset.sum (Polynomial.support p) fun i =>\n      Polynomial.sum q fun j a => (Polynomial.monomial (i + j)) (Polynomial.coeff p i * a)","name":"Polynomial.mul_eq_sum_sum","isProp":true,"docString":"Expressing the product of two polynomials as a double sum. ","distance":0.359023107992323009529656019367394037544727325439453125}]]