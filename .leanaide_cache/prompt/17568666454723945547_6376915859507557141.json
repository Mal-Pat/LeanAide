[["Open-open circular interval ",{"type":"{Œ± : Type u_1} ‚Üí [inst : CircularPreorder Œ±] ‚Üí Œ± ‚Üí Œ± ‚Üí Set Œ±","name":"Set.cIoo","isProp":false,"docString":"Open-open circular interval ","distance":0.29170425363887175773669468981097452342510223388671875}],[" The projection map of an open subtype is open.",{"type":"‚àÄ {X : Type u} [inst : TopologicalSpace X] {s : Set X}, IsOpen s ‚Üí IsOpenMap Subtype.val","name":"IsOpen.isOpenMap_subtype_val","isProp":true,"docString":" The projection map of an open subtype is open.","distance":0.3892673564315582979133978369645774364471435546875}],["This theorem states that a set `s` is open if and only if for every point `x` in `s` and every point `y` that is close to `x`, `y` is also in `s`. Here, `X` is a type equipped with a topological space structure and `nhds x` represents the neighborhood filter of `x`. In terms of topology, this theorem captures the intuitive idea of open sets: if a point is in an open set, then all points sufficiently close to it are also in the set. This is essentially a precise formulation of the \"without boundary\" property of open sets.",{"type":"‚àÄ {X : Type u} {s : Set X} [inst : TopologicalSpace X], IsOpen s ‚Üî ‚àÄ x ‚àà s, ‚àÄ·∂† (y : X) in nhds x, y ‚àà s","name":"isOpen_iff_eventually","isProp":true,"docString":"This theorem states that a set `s` is open if and only if for every point `x` in `s` and every point `y` that is close to `x`, `y` is also in `s`. Here, `X` is a type equipped with a topological space structure and `nhds x` represents the neighborhood filter of `x`. In terms of topology, this theorem captures the intuitive idea of open sets: if a point is in an open set, then all points sufficiently close to it are also in the set. This is essentially a precise formulation of the \"without boundary\" property of open sets.","distance":0.4006736103871855192437578807584941387176513671875}],["Reinterpret a clopen as an open. ",{"type":"{Œ± : Type u_2} ‚Üí [inst : TopologicalSpace Œ±] ‚Üí TopologicalSpace.Clopens Œ± ‚Üí TopologicalSpace.Opens Œ±","name":"TopologicalSpace.Clopens.toOpens","isProp":false,"docString":"Reinterpret a clopen as an open. ","distance":0.307095421908577304037635258282534778118133544921875}],[" A product set in a product space is open if and only if both factors are open or one of them is empty.",{"type":"‚àÄ {X : Type u} {Y : Type v} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] {s : Set X} {t : Set Y},\n  IsOpen (s √óÀ¢ t) ‚Üî IsOpen s ‚àß IsOpen t ‚à® s = ‚àÖ ‚à® t = ‚àÖ","name":"isOpen_prod_iff'","isProp":true,"docString":" A product set in a product space is open if and only if both factors are open or one of them is empty.","distance":0.403326315491583431427358164000906981527805328369140625}],["The theorem `isOpen_empty` states that for any type `X` equipped with a topological space structure, the empty set is open in this topological space. In mathematical terms, this theorem asserts that in any topological space, the empty set is always an open set, which is a fundamental axiom of topology.",{"type":"‚àÄ {X : Type u} [inst : TopologicalSpace X], IsOpen ‚àÖ","name":"isOpen_empty","isProp":true,"docString":"The theorem `isOpen_empty` states that for any type `X` equipped with a topological space structure, the empty set is open in this topological space. In mathematical terms, this theorem asserts that in any topological space, the empty set is always an open set, which is a fundamental axiom of topology.","distance":0.409284891468656153445948575608781538903713226318359375}],["Reinterpret a compact open as an open. ",{"type":"{Œ± : Type u_1} ‚Üí [inst : TopologicalSpace Œ±] ‚Üí TopologicalSpace.CompactOpens Œ± ‚Üí TopologicalSpace.Opens Œ±","name":"TopologicalSpace.CompactOpens.toOpens","isProp":false,"docString":"Reinterpret a compact open as an open. ","distance":0.3092038823223557386654647416435182094573974609375}],["Left-open right-open interval ",{"type":"{Œ± : Type u_1} ‚Üí [inst : Preorder Œ±] ‚Üí Œ± ‚Üí Œ± ‚Üí Set Œ±","name":"Set.Ioo","isProp":false,"docString":"Left-open right-open interval ","distance":0.312688311410475650031770555870025418698787689208984375}],["The (open) thickening is an open set. ",{"type":"‚àÄ {Œ± : Type u} [inst : PseudoEMetricSpace Œ±] {Œ¥ : ‚Ñù} {E : Set Œ±}, IsOpen (Metric.thickening Œ¥ E)","name":"Metric.isOpen_thickening","isProp":true,"docString":"The (open) thickening is an open set. ","distance":0.328914165203102182299943478938075713813304901123046875}],["The closure of every open set is open. ",{"type":"‚àÄ {X : Type u} [inst : TopologicalSpace X] [self : ExtremallyDisconnected X] (U : Set X), IsOpen U ‚Üí IsOpen (closure U)","name":"ExtremallyDisconnected.open_closure","isProp":true,"docString":"The closure of every open set is open. ","distance":0.337381485956455617891691645127139054238796234130859375}],["Each set from the partially refined family is open. ",{"type":"‚àÄ {Œπ : Type u_1} {X : Type u_2} [inst : TopologicalSpace X] {u : Œπ ‚Üí Set X} {s : Set X}\n  (self : ShrinkingLemma.PartialRefinement u s) (i : Œπ), IsOpen (ShrinkingLemma.PartialRefinement.toFun self i)","name":"ShrinkingLemma.PartialRefinement.isOpen","isProp":true,"docString":"Each set from the partially refined family is open. ","distance":0.33787525888884351044083587112254463136196136474609375}],["the subschemes of an open cover ",{"type":"{X : AlgebraicGeometry.Scheme} ‚Üí (self : AlgebraicGeometry.Scheme.OpenCover X) ‚Üí self.J ‚Üí AlgebraicGeometry.Scheme","name":"AlgebraicGeometry.Scheme.OpenCover.obj","isProp":false,"docString":"the subschemes of an open cover ","distance":0.342590617253100859773695674448390491306781768798828125}],["The image of a compact open under a continuous open map. ",{"type":"{Œ± : Type u_1} ‚Üí\n  {Œ≤ : Type u_2} ‚Üí\n    [inst : TopologicalSpace Œ±] ‚Üí\n      [inst_1 : TopologicalSpace Œ≤] ‚Üí\n        (f : Œ± ‚Üí Œ≤) ‚Üí Continuous f ‚Üí IsOpenMap f ‚Üí TopologicalSpace.CompactOpens Œ± ‚Üí TopologicalSpace.CompactOpens Œ≤","name":"TopologicalSpace.CompactOpens.map","isProp":false,"docString":"The image of a compact open under a continuous open map. ","distance":0.343932807064060430679575119938817806541919708251953125}],["The image of an open immersion as an open set. ",{"type":"{X Y : AlgebraicGeometry.Scheme} ‚Üí\n  (f : X ‚ü∂ Y) ‚Üí [H : AlgebraicGeometry.IsOpenImmersion f] ‚Üí TopologicalSpace.Opens ‚Üë‚ÜëY.toPresheafedSpace","name":"AlgebraicGeometry.Scheme.Hom.opensRange","isProp":false,"docString":"The image of an open immersion as an open set. ","distance":0.349375988949667537486476476260577328503131866455078125}],["Left-open right-closed interval ",{"type":"{Œ± : Type u_1} ‚Üí [inst : Preorder Œ±] ‚Üí Œ± ‚Üí Œ± ‚Üí Set Œ±","name":"Set.Ioc","isProp":false,"docString":"Left-open right-closed interval ","distance":0.35204229287634392076000722227036021649837493896484375}],["The open upper half plane ",{"type":"Lean.ParserDescr","name":"UpperHalfPlane.term‚Ñç","isProp":false,"docString":"The open upper half plane ","distance":0.35243269796325538134595944939064793288707733154296875}],["The preimage of an open set, as an open set. ",{"type":"{Œ± : Type u_2} ‚Üí\n  {Œ≤ : Type u_3} ‚Üí\n    [inst : TopologicalSpace Œ±] ‚Üí\n      [inst_1 : TopologicalSpace Œ≤] ‚Üí C(Œ±, Œ≤) ‚Üí FrameHom (TopologicalSpace.Opens Œ≤) (TopologicalSpace.Opens Œ±)","name":"TopologicalSpace.Opens.comap","isProp":false,"docString":"The preimage of an open set, as an open set. ","distance":0.35250633647287987759710858881589956581592559814453125}],["A set is clopen if it is both closed and open. ",{"type":"{X : Type u} ‚Üí [inst : TopologicalSpace X] ‚Üí Set X ‚Üí Prop","name":"IsClopen","isProp":false,"docString":"A set is clopen if it is both closed and open. ","distance":0.353330510778701256668909991276450455188751220703125}],["The sheaf hom on all basic opens, commuting with restrictions. ",{"type":"(X : AlgebraicGeometry.LocallyRingedSpace) ‚Üí\n  CategoryTheory.Functor.comp (CategoryTheory.inducedFunctor PrimeSpectrum.basicOpen).op\n      (AlgebraicGeometry.Spec.structureSheaf ‚Üë(AlgebraicGeometry.LocallyRingedSpace.Œì.obj (Opposite.op X))).val ‚ü∂\n    CategoryTheory.Functor.comp (CategoryTheory.inducedFunctor PrimeSpectrum.basicOpen).op\n      ((TopCat.Sheaf.pushforward CommRingCat (AlgebraicGeometry.LocallyRingedSpace.toŒìSpecBase X)).obj\n          (AlgebraicGeometry.LocallyRingedSpace.ùí™ X)).val","name":"AlgebraicGeometry.LocallyRingedSpace.toŒìSpecCBasicOpens","isProp":false,"docString":"The sheaf hom on all basic opens, commuting with restrictions. ","distance":0.3559060449783810753388024750165641307830810546875}],["An open set is a GŒ¥ set. ",{"type":"‚àÄ {X : Type u_1} [inst : TopologicalSpace X] {s : Set X}, IsOpen s ‚Üí IsGŒ¥ s","name":"IsOpen.isGŒ¥","isProp":true,"docString":"An open set is a GŒ¥ set. ","distance":0.358404734452405338007707769065746106207370758056640625}],["Two different points can be separated by open sets. ",{"type":"‚àÄ {X : Type u_1} [inst : TopologicalSpace X] [inst_1 : T2Space X] {x y : X},\n  x ‚â† y ‚Üí ‚àÉ u v, IsOpen u ‚àß IsOpen v ‚àß x ‚àà u ‚àß y ‚àà v ‚àß Disjoint u v","name":"t2_separation","isProp":true,"docString":"Two different points can be separated by open sets. ","distance":0.3601930576557130780912530099158175289630889892578125}],["Left-closed right-open interval ",{"type":"{Œ± : Type u_1} ‚Üí [inst : Preorder Œ±] ‚Üí Œ± ‚Üí Œ± ‚Üí Set Œ±","name":"Set.Ico","isProp":false,"docString":"Left-closed right-open interval ","distance":0.362380687087493547071659349967376329004764556884765625}],["The range of an open embedding is an open set. ",{"type":"‚àÄ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] {f : X ‚Üí Y},\n  OpenEmbedding f ‚Üí IsOpen (Set.range f)","name":"OpenEmbedding.open_range","isProp":true,"docString":"The range of an open embedding is an open set. ","distance":0.362581230448281222056294836875167675316333770751953125}],["Adding an open immersion into an open cover gives another open cover. ",{"type":"{X : AlgebraicGeometry.Scheme} ‚Üí\n  AlgebraicGeometry.Scheme.OpenCover X ‚Üí\n    {Y : AlgebraicGeometry.Scheme} ‚Üí\n      (f : Y ‚ü∂ X) ‚Üí [inst : AlgebraicGeometry.IsOpenImmersion f] ‚Üí AlgebraicGeometry.Scheme.OpenCover X","name":"AlgebraicGeometry.Scheme.OpenCover.add","isProp":false,"docString":"Adding an open immersion into an open cover gives another open cover. ","distance":0.36415599126421771547512662436929531395435333251953125}]]