[["The product of two two-pointings. ",{"type":"{α : Type u_1} → {β : Type u_2} → TwoPointing α → TwoPointing β → TwoPointing (α × β)","name":"TwoPointing.prod","isProp":false,"docString":"The product of two two-pointings. ","distance":0.2144240310997266585335552235846989788115024566650390625}],[" The second component of the product of two dual numbers is equal to the sum of the product of their first components and the product of their second components.",{"type":"∀ {R : Type u_1} [inst : Semiring R] (x y : DualNumber R),\n  TrivSqZeroExt.snd (x * y) = TrivSqZeroExt.fst x * TrivSqZeroExt.snd y + TrivSqZeroExt.snd x * TrivSqZeroExt.fst y","name":"DualNumber.snd_mul","isProp":true,"docString":" The second component of the product of two dual numbers is equal to the sum of the product of their first components and the product of their second components.","distance":0.285732513322246528542081023260834626853466033935546875}],["This theorem states that for any two natural numbers `m` and `n`, the product of `m` and the successor of `n` with a negative sign is equal to the negation of the product of `m` and the successor of `n` when both are cast to integers. In other words, multiplying a natural number with the negative successor of another natural number in the integers is the same as taking the negative of the product of the two natural numbers, where the second one has been succeeded.",{"type":"∀ (m n : ℕ), ↑m * Int.negSucc n = -↑(m * n.succ)","name":"Int.ofNat_mul_negSucc","isProp":true,"docString":"This theorem states that for any two natural numbers `m` and `n`, the product of `m` and the successor of `n` with a negative sign is equal to the negation of the product of `m` and the successor of `n` when both are cast to integers. In other words, multiplying a natural number with the negative successor of another natural number in the integers is the same as taking the negative of the product of the two natural numbers, where the second one has been succeeded.","distance":0.31954297798214048587084334940300323069095611572265625}],["Expressing the product of two polynomials as a double sum. ",{"type":"∀ {R : Type u} [inst : Semiring R] {p q : Polynomial R},\n  p * q =\n    Finset.sum (Polynomial.support p) fun i =>\n      Polynomial.sum q fun j a => (Polynomial.monomial (i + j)) (Polynomial.coeff p i * a)","name":"Polynomial.mul_eq_sum_sum","isProp":true,"docString":"Expressing the product of two polynomials as a double sum. ","distance":0.2321456243061603696986594513873569667339324951171875}],[" The product of two positive numbers has the same prime factors, possibly in a different order, as the concatenation of their prime factorizations.",{"type":"∀ {a b : ℕ}, a ≠ 0 → b ≠ 0 → (a * b).factors.Perm (a.factors ++ b.factors)","name":"Nat.perm_factors_mul","isProp":true,"docString":" The product of two positive numbers has the same prime factors, possibly in a different order, as the concatenation of their prime factorizations.","distance":0.311540437297852690345933979187975637614727020263671875}],["This theorem states that for any two natural numbers `n` and `m`, the product of the successor of `n` (i.e., `n + 1` in common mathematical notation) and `m` is equal to the sum of the product of `n` and `m`, and `m`. In standard mathematical notation, this is saying that for all natural numbers n and m, (n + 1) * m = n * m + m. This is a basic property of natural number arithmetic, reflecting the distributive law.",{"type":"∀ (n m : ℕ), n.succ * m = n * m + m","name":"Nat.succ_mul","isProp":true,"docString":"This theorem states that for any two natural numbers `n` and `m`, the product of the successor of `n` (i.e., `n + 1` in common mathematical notation) and `m` is equal to the sum of the product of `n` and `m`, and `m`. In standard mathematical notation, this is saying that for all natural numbers n and m, (n + 1) * m = n * m + m. This is a basic property of natural number arithmetic, reflecting the distributive law.","distance":0.325619838304816833218779947856091894209384918212890625}],["Product of two rings is a ring. ",{"type":"{R : Type u_3} → {S : Type u_5} → [inst : Ring R] → [inst : Ring S] → Ring (R × S)","name":"Prod.instRing","isProp":false,"docString":"Product of two rings is a ring. ","distance":0.2380354872978596991739408395005739293992519378662109375}],["The second projection from the product. ",{"type":"{X Y : TopCat} → TopCat.of (↑X × ↑Y) ⟶ Y","name":"TopCat.prodSnd","isProp":false,"docString":"The second projection from the product. ","distance":0.239338902426877719875619732192717492580413818359375}],["Notation for the product ",{"type":"Lean.TrailingParserDescr","name":"CategoryTheory.Limits.«term_⨯_»","isProp":false,"docString":"Notation for the product ","distance":0.24205167160338447729373001493513584136962890625}],["The alternating product of a list. ",{"type":"{G : Type u_1} → [inst : One G] → [inst : Mul G] → [inst : Inv G] → List G → G","name":"List.alternatingProd","isProp":false,"docString":"The alternating product of a list. ","distance":0.242484819399330031597372681062552146613597869873046875}],["Product of two uniform isomorphisms. ",{"type":"{α : Type u} →\n  {β : Type u_1} →\n    {γ : Type u_2} →\n      {δ : Type u_3} →\n        [inst : UniformSpace α] →\n          [inst_1 : UniformSpace β] →\n            [inst_2 : UniformSpace γ] → [inst_3 : UniformSpace δ] → α ≃ᵤ β → γ ≃ᵤ δ → α × γ ≃ᵤ β × δ","name":"UniformEquiv.prodCongr","isProp":false,"docString":"Product of two uniform isomorphisms. ","distance":0.2426296224057989114886169090823386795818805694580078125}],["Product of two homeomorphisms. ",{"type":"{X : Type u_1} →\n  {Y : Type u_2} →\n    [inst : TopologicalSpace X] →\n      [inst_1 : TopologicalSpace Y] →\n        {X' : Type u_4} →\n          {Y' : Type u_5} →\n            [inst_2 : TopologicalSpace X'] → [inst_3 : TopologicalSpace Y'] → X ≃ₜ X' → Y ≃ₜ Y' → X × Y ≃ₜ X' × Y'","name":"Homeomorph.prodCongr","isProp":false,"docString":"Product of two homeomorphisms. ","distance":0.2467112608577377297347510420877370052039623260498046875}],["Product of two kernels. This is meaningful only when the kernels are s-finite. ",{"type":"{α : Type u_1} →\n  {β : Type u_2} →\n    {mα : MeasurableSpace α} →\n      {mβ : MeasurableSpace β} →\n        {γ : Type u_4} →\n          {mγ : MeasurableSpace γ} →\n            ↥(ProbabilityTheory.kernel α β) → ↥(ProbabilityTheory.kernel α γ) → ↥(ProbabilityTheory.kernel α (β × γ))","name":"ProbabilityTheory.kernel.prod","isProp":false,"docString":"Product of two kernels. This is meaningful only when the kernels are s-finite. ","distance":0.2540831283712672306052127169095911085605621337890625}],["The tensor product of two holors. ",{"type":"{α : Type} → {ds₁ ds₂ : List ℕ} → [inst : Mul α] → Holor α ds₁ → Holor α ds₂ → Holor α (ds₁ ++ ds₂)","name":"Holor.mul","isProp":false,"docString":"The tensor product of two holors. ","distance":0.254438480223140139901971679137204773724079132080078125}],["An inner product with a sum on the right. ",{"type":"∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  {ι : Type u_4} (s : Finset ι) (f : ι → E) (x : E), ⟪x, Finset.sum s fun i => f i⟫_𝕜 = Finset.sum s fun i => ⟪x, f i⟫_𝕜","name":"inner_sum","isProp":true,"docString":"An inner product with a sum on the right. ","distance":0.25621904163557729372513449561665765941143035888671875}],["Product of two continuous homomorphisms on the same space. ",{"type":"{A : Type u_2} →\n  {B : Type u_3} →\n    {C : Type u_4} →\n      [inst : Monoid A] →\n        [inst_1 : Monoid B] →\n          [inst_2 : Monoid C] →\n            [inst_3 : TopologicalSpace A] →\n              [inst_4 : TopologicalSpace B] →\n                [inst_5 : TopologicalSpace C] →\n                  ContinuousMonoidHom A B → ContinuousMonoidHom A C → ContinuousMonoidHom A (B × C)","name":"ContinuousMonoidHom.prod","isProp":false,"docString":"Product of two continuous homomorphisms on the same space. ","distance":0.25679424298094744028020386394928209483623504638671875}],["An inner product with a sum on the left. ",{"type":"∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  {ι : Type u_4} (s : Finset ι) (f : ι → E) (x : E), ⟪Finset.sum s fun i => f i, x⟫_𝕜 = Finset.sum s fun i => ⟪f i, x⟫_𝕜","name":"sum_inner","isProp":true,"docString":"An inner product with a sum on the left. ","distance":0.258324770469540443418310360357281751930713653564453125}],["The linear sum of two orders ",{"type":"Lean.TrailingParserDescr","name":"Sum.Lex.«term_⊕ₗ_»","isProp":false,"docString":"The linear sum of two orders ","distance":0.259531856291476514808636011366616003215312957763671875}],["The equivalence between the opposite of a product and the product of the opposites. ",{"type":"(C : Type u₃) →\n  [inst : CategoryTheory.Category.{v₃, u₃} C] →\n    {D : Type u₄} → [inst_1 : CategoryTheory.Category.{v₄, u₄} D] → (C × D)ᵒᵖ ≌ Cᵒᵖ × Dᵒᵖ","name":"CategoryTheory.prodOpEquiv","isProp":false,"docString":"The equivalence between the opposite of a product and the product of the opposites. ","distance":0.259913306410394617795844851571018807590007781982421875}],["The projection onto the second summand of a binary biproduct. ",{"type":"{C : Type u} →\n  [inst : CategoryTheory.Category.{v, u} C] →\n    [inst_1 : CategoryTheory.Limits.HasZeroMorphisms C] →\n      {X Y : C} → [inst_2 : CategoryTheory.Limits.HasBinaryBiproduct X Y] → X ⊞ Y ⟶ Y","name":"CategoryTheory.Limits.biprod.snd","isProp":false,"docString":"The projection onto the second summand of a binary biproduct. ","distance":0.261212442351899387649183381654438562691211700439453125}],["The cartesian product of two natural transformations. ",{"type":"{A : Type u₁} →\n  [inst : CategoryTheory.Category.{v₁, u₁} A] →\n    {B : Type u₂} →\n      [inst_1 : CategoryTheory.Category.{v₂, u₂} B] →\n        {C : Type u₃} →\n          [inst_2 : CategoryTheory.Category.{v₃, u₃} C] →\n            {D : Type u₄} →\n              [inst_3 : CategoryTheory.Category.{v₄, u₄} D] →\n                {F G : CategoryTheory.Functor A B} →\n                  {H I : CategoryTheory.Functor C D} →\n                    (F ⟶ G) → (H ⟶ I) → (CategoryTheory.Functor.prod F H ⟶ CategoryTheory.Functor.prod G I)","name":"CategoryTheory.NatTrans.prod","isProp":false,"docString":"The cartesian product of two natural transformations. ","distance":0.261282681742302902438979117505368776619434356689453125}],["The product of two lower sets as a lower set. ",{"type":"{α : Type u_1} →\n  {β : Type u_2} → [inst : Preorder α] → [inst_1 : Preorder β] → LowerSet α → LowerSet β → LowerSet (α × β)","name":"LowerSet.prod","isProp":false,"docString":"The product of two lower sets as a lower set. ","distance":0.265330060996840810805252885984373278915882110595703125}],["The product of two positive elements is positive. ",{"type":"∀ {α : Type u} [self : StrictOrderedRing α] (a b : α), 0 < a → 0 < b → 0 < a * b","name":"StrictOrderedRing.mul_pos","isProp":true,"docString":"The product of two positive elements is positive. ","distance":0.26784771101376569912844161081011407077312469482421875}],["The product of two upper sets as an upper set. ",{"type":"{α : Type u_1} →\n  {β : Type u_2} → [inst : Preorder α] → [inst_1 : Preorder β] → UpperSet α → UpperSet β → UpperSet (α × β)","name":"UpperSet.prod","isProp":false,"docString":"The product of two upper sets as an upper set. ","distance":0.268828088259325970188484689060715027153491973876953125}]]