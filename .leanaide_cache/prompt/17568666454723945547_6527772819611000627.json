[["Product of two uniform isomorphisms. ",{"type":"{α : Type u} →\n  {β : Type u_1} →\n    {γ : Type u_2} →\n      {δ : Type u_3} →\n        [inst : UniformSpace α] →\n          [inst_1 : UniformSpace β] →\n            [inst_2 : UniformSpace γ] → [inst_3 : UniformSpace δ] → α ≃ᵤ β → γ ≃ᵤ δ → α × γ ≃ᵤ β × δ","name":"UniformEquiv.prodCongr","isProp":false,"docString":"Product of two uniform isomorphisms. ","distance":0.28788634292920123325387748991488479077816009521484375}],[" The second component of the product of two dual numbers is equal to the sum of the product of their first components and the product of their second components.",{"type":"∀ {R : Type u_1} [inst : Semiring R] (x y : DualNumber R),\n  TrivSqZeroExt.snd (x * y) = TrivSqZeroExt.fst x * TrivSqZeroExt.snd y + TrivSqZeroExt.snd x * TrivSqZeroExt.fst y","name":"DualNumber.snd_mul","isProp":true,"docString":" The second component of the product of two dual numbers is equal to the sum of the product of their first components and the product of their second components.","distance":0.376385692154361850558785818066098727285861968994140625}],["The theorem `NNReal.coe_prod` states that for any type `α`, any finite set `s` of type `α`, and any function `f` mapping elements of `α` to nonnegative real numbers (`NNReal`), the real number representation of the product of `f a` for each `a` in `s` is equal to the product of the real number representations of `f a` for each `a` in `s`. This is equivalent to saying that taking the product of the nonnegative real number results first and then converting to real numbers is the same as converting each nonnegative real number result to a real number first and then taking the product.",{"type":"∀ {α : Type u_1} {s : Finset α} {f : α → NNReal}, ↑(s.prod fun a => f a) = s.prod fun a => ↑(f a)","name":"NNReal.coe_prod","isProp":true,"docString":"The theorem `NNReal.coe_prod` states that for any type `α`, any finite set `s` of type `α`, and any function `f` mapping elements of `α` to nonnegative real numbers (`NNReal`), the real number representation of the product of `f a` for each `a` in `s` is equal to the product of the real number representations of `f a` for each `a` in `s`. This is equivalent to saying that taking the product of the nonnegative real number results first and then converting to real numbers is the same as converting each nonnegative real number result to a real number first and then taking the product.","distance":0.368692546912075036491529544946388341486454010009765625}],["Product of two rings is a ring. ",{"type":"{R : Type u_3} → {S : Type u_5} → [inst : Ring R] → [inst : Ring S] → Ring (R × S)","name":"Prod.instRing","isProp":false,"docString":"Product of two rings is a ring. ","distance":0.293775220955368954189879104887950234115123748779296875}],[" For any category with binary products, the product of two objects exists.",{"type":"∀ {C : Type u_2} [inst : CategoryTheory.Category.{u_1, u_2} C] [inst_1 : CategoryTheory.Limits.HasBinaryProducts C]\n  (X Y : C), CategoryTheory.Limits.HasLimit (CategoryTheory.Limits.pair X Y)","name":"CategoryTheory.Limits.prod.functor.proof_1","isProp":true,"docString":" For any category with binary products, the product of two objects exists.","distance":0.387305768226091917671993769545224495232105255126953125}],["This theorem, `Multiset.noncommProd_coe`, states that for any type `α` that forms a monoid, given a list `l` of elements of `α` such that each pair of distinct elements in `l` commute (i.e., their multiplication is commutative), when `l` is considered as a multiset and its elements' non-commutative product is calculated using `Multiset.noncommProd`, the result is equal to the usual product of the list `l` computed using `List.prod`. In simpler terms, even if we treat our list as a multiset and consider a non-commutative product, as long as all elements commute, we get the same result as the standard list product.",{"type":"∀ {α : Type u_3} [inst : Monoid α] (l : List α) (comm : {x | x ∈ ↑l}.Pairwise Commute), (↑l).noncommProd comm = l.prod","name":"Multiset.noncommProd_coe","isProp":true,"docString":"This theorem, `Multiset.noncommProd_coe`, states that for any type `α` that forms a monoid, given a list `l` of elements of `α` such that each pair of distinct elements in `l` commute (i.e., their multiplication is commutative), when `l` is considered as a multiset and its elements' non-commutative product is calculated using `Multiset.noncommProd`, the result is equal to the usual product of the list `l` computed using `List.prod`. In simpler terms, even if we treat our list as a multiset and consider a non-commutative product, as long as all elements commute, we get the same result as the standard list product.","distance":0.370513366418527223533629921803367324173450469970703125}],["The coproduct of the cofinite filters on two types is the cofinite filter on their product. ",{"type":"∀ {α : Type u_2} {β : Type u_3}, Filter.coprod Filter.cofinite Filter.cofinite = Filter.cofinite","name":"Filter.coprod_cofinite","isProp":true,"docString":"The coproduct of the cofinite filters on two types is the cofinite filter on their product. ","distance":0.297988214387442218455959164202795363962650299072265625}],["Coproduct of two monoids or groups. ",{"type":"(M : Type u_1) → (N : Type u_2) → [inst : MulOneClass M] → [inst : MulOneClass N] → Type (max u_1 u_2)","name":"Monoid.Coprod","isProp":false,"docString":"Coproduct of two monoids or groups. ","distance":0.300934452239965677389221809789887629449367523193359375}],["The cofan constructed of the inclusions from the coproduct is colimiting. ",{"type":"{β : Type w} →\n  {C : Type u} →\n    [inst : CategoryTheory.Category.{v, u} C] →\n      (f : β → C) →\n        [inst_1 : CategoryTheory.Limits.HasCoproduct f] →\n          CategoryTheory.Limits.IsColimit (CategoryTheory.Limits.Cofan.mk (∐ f) (CategoryTheory.Limits.Sigma.ι f))","name":"CategoryTheory.Limits.coproductIsCoproduct","isProp":false,"docString":"The cofan constructed of the inclusions from the coproduct is colimiting. ","distance":0.301864103708745556975401314048212952911853790283203125}],["Product of two homeomorphisms. ",{"type":"{X : Type u_1} →\n  {Y : Type u_2} →\n    [inst : TopologicalSpace X] →\n      [inst_1 : TopologicalSpace Y] →\n        {X' : Type u_4} →\n          {Y' : Type u_5} →\n            [inst_2 : TopologicalSpace X'] → [inst_3 : TopologicalSpace Y'] → X ≃ₜ X' → Y ≃ₜ Y' → X × Y ≃ₜ X' × Y'","name":"Homeomorph.prodCongr","isProp":false,"docString":"Product of two homeomorphisms. ","distance":0.307160403631008716018868653918616473674774169921875}],["Binary coproducts are symmetric. ",{"type":"{C : Type u} →\n  [inst : CategoryTheory.Category.{v, u} C] →\n    {X Y : C} →\n      {c : CategoryTheory.Limits.BinaryCofan X Y} →\n        CategoryTheory.Limits.IsColimit c →\n          CategoryTheory.Limits.IsColimit\n            (CategoryTheory.Limits.BinaryCofan.mk (CategoryTheory.Limits.BinaryCofan.inr c)\n              (CategoryTheory.Limits.BinaryCofan.inl c))","name":"CategoryTheory.Limits.BinaryCofan.isColimitFlip","isProp":false,"docString":"Binary coproducts are symmetric. ","distance":0.309892362019557499053235005703754723072052001953125}],["The tensor product of two holors. ",{"type":"{α : Type} → {ds₁ ds₂ : List ℕ} → [inst : Mul α] → Holor α ds₁ → Holor α ds₂ → Holor α (ds₁ ++ ds₂)","name":"Holor.mul","isProp":false,"docString":"The tensor product of two holors. ","distance":0.31386021691269638811405684464261867105960845947265625}],["Product of two commutative rings is a commutative ring. ",{"type":"{R : Type u_3} → {S : Type u_5} → [inst : CommRing R] → [inst : CommRing S] → CommRing (R × S)","name":"Prod.instCommRing","isProp":false,"docString":"Product of two commutative rings is a commutative ring. ","distance":0.31511747530490608060205204310477711260318756103515625}],["The product of two two-pointings. ",{"type":"{α : Type u_1} → {β : Type u_2} → TwoPointing α → TwoPointing β → TwoPointing (α × β)","name":"TwoPointing.prod","isProp":false,"docString":"The product of two two-pointings. ","distance":0.317502618507765621558291968540288507938385009765625}],["The coproduct cocone associated to the explicit finite coproduct. ",{"type":"{α : Type} → [inst : Fintype α] → (X : α → Profinite) → CategoryTheory.Limits.Cocone (CategoryTheory.Discrete.functor X)","name":"Profinite.finiteCoproduct.cocone","isProp":false,"docString":"The coproduct cocone associated to the explicit finite coproduct. ","distance":0.318342657966651787493361780434497632086277008056640625}],["The second projection from the product. ",{"type":"{X Y : TopCat} → TopCat.of (↑X × ↑Y) ⟶ Y","name":"TopCat.prodSnd","isProp":false,"docString":"The second projection from the product. ","distance":0.318606295079519152846359020259114913642406463623046875}],["The explicit finite coproduct cocone is a colimit cocone. ",{"type":"{α : Type} →\n  [inst : Fintype α] → (X : α → Profinite) → CategoryTheory.Limits.IsColimit (Profinite.finiteCoproduct.cocone X)","name":"Profinite.finiteCoproduct.isColimit","isProp":false,"docString":"The explicit finite coproduct cocone is a colimit cocone. ","distance":0.31974825887434066284953360081999562680721282958984375}],["Product of two commutative semirings is a commutative semiring. ",{"type":"{R : Type u_3} → {S : Type u_5} → [inst : CommSemiring R] → [inst : CommSemiring S] → CommSemiring (R × S)","name":"Prod.instCommSemiring","isProp":false,"docString":"Product of two commutative semirings is a commutative semiring. ","distance":0.32186608788493031862998350334237329661846160888671875}],["The product of two partial equivalences, as a partial equivalence on the product. ",{"type":"{α : Type u_1} →\n  {β : Type u_2} → {γ : Type u_3} → {δ : Type u_4} → PartialEquiv α β → PartialEquiv γ δ → PartialEquiv (α × γ) (β × δ)","name":"PartialEquiv.prod","isProp":false,"docString":"The product of two partial equivalences, as a partial equivalence on the product. ","distance":0.324902207087239103255882355369976721704006195068359375}],["The property of reflecting coproducts expressed in terms of cofans. ",{"type":"{C : Type u₁} →\n  [inst : CategoryTheory.Category.{v₁, u₁} C] →\n    {D : Type u₂} →\n      [inst_1 : CategoryTheory.Category.{v₂, u₂} D] →\n        (G : CategoryTheory.Functor C D) →\n          {J : Type w} →\n            (f : J → C) →\n              [inst_2 : CategoryTheory.Limits.ReflectsColimit (CategoryTheory.Discrete.functor f) G] →\n                {P : C} →\n                  (g : (j : J) → f j ⟶ P) →\n                    CategoryTheory.Limits.IsColimit (CategoryTheory.Limits.Cofan.mk (G.obj P) fun j => G.map (g j)) →\n                      CategoryTheory.Limits.IsColimit (CategoryTheory.Limits.Cofan.mk P g)","name":"CategoryTheory.Limits.isColimitOfIsColimitCofanMkObj","isProp":false,"docString":"The property of reflecting coproducts expressed in terms of cofans. ","distance":0.325456606176223350868070838259882293641567230224609375}],["Expressing the product of two polynomials as a double sum. ",{"type":"∀ {R : Type u} [inst : Semiring R] {p q : Polynomial R},\n  p * q =\n    Finset.sum (Polynomial.support p) fun i =>\n      Polynomial.sum q fun j a => (Polynomial.monomial (i + j)) (Polynomial.coeff p i * a)","name":"Polynomial.mul_eq_sum_sum","isProp":true,"docString":"Expressing the product of two polynomials as a double sum. ","distance":0.325467315722276440137505915117799304425716400146484375}],["Notation for the product ",{"type":"Lean.TrailingParserDescr","name":"CategoryTheory.Limits.«term_⨯_»","isProp":false,"docString":"Notation for the product ","distance":0.325573649427550126933539331730571575462818145751953125}],["Product of two semirings is a semiring. ",{"type":"{R : Type u_3} → {S : Type u_5} → [inst : Semiring R] → [inst : Semiring S] → Semiring (R × S)","name":"Prod.instSemiring","isProp":false,"docString":"Product of two semirings is a semiring. ","distance":0.327307062258534398058174019752186723053455352783203125}],["Product of two kernels. This is meaningful only when the kernels are s-finite. ",{"type":"{α : Type u_1} →\n  {β : Type u_2} →\n    {mα : MeasurableSpace α} →\n      {mβ : MeasurableSpace β} →\n        {γ : Type u_4} →\n          {mγ : MeasurableSpace γ} →\n            ↥(ProbabilityTheory.kernel α β) → ↥(ProbabilityTheory.kernel α γ) → ↥(ProbabilityTheory.kernel α (β × γ))","name":"ProbabilityTheory.kernel.prod","isProp":false,"docString":"Product of two kernels. This is meaningful only when the kernels are s-finite. ","distance":0.328740117884937010916956978689995594322681427001953125}]]